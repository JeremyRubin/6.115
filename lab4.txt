



##################
##################
./default.asm

##################
##################
; An effort to collect the things I use often
#Peripheral Base Addrs
.equ perph0, 0fe00h
.equ perph1, 0fe08h
.equ perph2, 0fe10h
.equ perph3, 0fe18h
.equ perph4, 0fe20h
.equ perph5, 0fe28h
.equ perph6, 0fe30h
.equ perph7, 0fe3p8h

; Interrupt types
.equ interrupt_timer_0, 82h

.org 0000h
ljmp start
.org 03h
ljmp ext_0_ISR
.org 0Bh
ljmp timer_0_ISR
.org 13h
ljmp ext_1_ISR
.org 1B h
ljmp ext_1_ISR
.org23h
ljmp serial_ISR
; Reserve some scratchpad with the names fR_[0-F] a.k.a., "fake Register n"
.org 30h
.equ fR_0, 30h
.equ fR_1, 31h
.equ fR_2, 32h
.equ fR_3, 33h
.equ fR_4, 34h
.equ fR_5, 35h
.equ fR_6, 36h
.equ fR_7, 37h
.equ fR_8, 38h
.equ fR_9, 39h
.equ fR_A, 3ah
.equ fR_B, 3bh
.equ fR_C, 3ch
.equ fR_D, 3dh
.equ fR_E, 3eh
.equ fR_F, 3fh
; Reserve some scratchpad with the names cR_[0-F] a.k.a., "config Register n". These should be renamed
.org 40h
; timer0 180 cycles
.equ timer0, 40h
.db 04ch
.equ cR_1, 41h
.equ cR_2, 42h
.equ cR_3, 43h
.equ cR_4, 44h
.equ cR_5, 45h
.equ cR_6, 46h
.equ cR_7, 47h
.equ cR_8, 48h
.equ cR_9, 49h
.equ cR_A, 4ah
.equ cR_B, 4bh
.equ cR_C, 4ch
.equ cR_D, 4dh
.equ cR_E, 4eh
.equ cR_F, 4fh
.org 50h
.org 100h
; Begin Main Block
start:
lcall init
loop:
    lcall blocking_keypad_nway
    sjmp loop ; repeat

timer_0_ISR:
timer_1_ISR:
ext_0_ISR:
ext_1_ISR:
serial_ISR:
    ; Protect data
    push acc
    push dpl
    push dph
    push b

    ; Restore data
    pop b
    pop dph
    pop dpl
    pop acc
    reti


blocking_keypad_nway:
    clr P3.2 ; enable the encoder chip
    blocking_keypad_nway_no_data:
    jnb P3.3, blocking_keypad_nway_no_data ; proceed if data avail

    mov a, P1 ; read p1
    lcall keypad_bin ; conver to a number 0-15
    ljmp nway; jump to the nway, then it will jump back
    blocking_keypad_nway_wait: ; wait for the data to clear
    jb p3.3, blocking_keypad_nway_wait

    setb P3.2 ; disable the encoder chip
    ret

keypad_bin:
    anl a, #0Fh ; Mask off the upper nibble
    inc a ; increment so that we go past the ret opcode
    movc a, @a+pc ; PC has the ret below, so we go a+pc -> a to pull from table
    ret
    .db 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
;===============================================================
; subroutine nway
; this routine branches (jumps) to the appropriate monitor
; routine. the routine number is in r2
;================================================================
keypad_nway:
   mov dptr, #keypad_jumtab ;point dptr at beginning of jump table
   rl a ;multiply by two.
   mov b, a
   inc a ;load first vector onto stack
   movc a, @a+dptr ; " "
   push acc ; " "
   mov a, b ;load acc with monitor routine number
   movc a, @a+dptr ;load second vector onto stack
   push acc ; " "
   ret ;jump to start of monitor routine

;=================================================================
; pattern jump table
;=================================================================
keypad_jumtab:
   .dw noCommand ; command '@' 00
   .dw noCommand ; command 'a' 01
   .dw noCommand ; command 'b' 02
   .dw noCommand ; command 'c' 03
   .dw noCommand ; command 'd' 04
   .dw noCommand ; command 'e' 05
   .dw noCommand ; command 'f' 06
   .dw noCommand ; command 'g' 07
   .dw noCommand ; command 'h' 08
   .dw noCommand ; command 'i' 09
   .dw noCommand ; command 'j' 0a
   .dw noCommand ; command 'k' 0b
   .dw noCommand ; command 'l' 0c
   .dw noCommand ; command 'm' 0d
   .dw noCommand ; command 'n' 0e
   .dw noCommand ; command 'o' 0f
noCommand:
    ljmp blocking_keypad_nway_wait

   ; If we ever get amulet working, this unreachable code should do it!
   ; mov dptr, #0FE15h
   ; movx a, @dptr
   ; anl a, #01h
   ; jz loop

   ; mov dptr, #0fe10h
   ; movx a, @dptr
   ; mov p1, a
   ; sjmp loop


init:
    lcall cleanup
    lcall setup_inputs
    mov a, interrupt_timer_0 ; Enable interrupts, enable timer 0 interrupt
    lcall setup_interrupts

    lcall setup_timers
    ret

; Setup anything which will be an input device
setup_inputs:
    setb p3.3 ; enable 3.3 as input
    mov p1, #0ffh ; enable port 1 as input

setup_timers:
    mov tmod, #02h ; set timer 0 for auto reload - mode 2
    mov th0, #timer0
    clr tcon ; run timer 0
    setb TR0 ; Turn timer on
    ; ^^^^ combine to one?
    mov tmod, #20h ; set timer 1 for auto reload - mode 2
    mov tcon, #41h ; run counter 1 and set edge trig ints
    mov th1, #0fdh ; set 9600 baud with xtal=11.059mhz
    mov scon, #50h ; set serial control reg for 8 bit data
                          ; and mode 1
    ret
setup_interrupts:
    setb EA
    mov IE, a
    ret
; Cleanup, clear any defaults
cleanup:
    clr a
    clr b
    clr c
    clr IE
    ret


; INCLUDE THIS FOR AMULET FUNCTION
init_amulet:
    mov dptr, #0fe13h
    mov a, #083h
    movx @dptr, a
    
    mov a, #20
    mov dptr, #0fe10h
    movx @dptr, a
    
    mov a, #00
    mov dptr, #0fe11h
    movx @dptr, a
    
    mov dptr, #0fe13h
    mov a, #07h
    movx @dptr, a

    mov a, #00h
    mov dptr, #0FE01h
    movx @dptr, a
    ret
;===============================================================
; subroutine sndchr
; this routine takes the chr in the acc and sends it out the
; serial port.
;===============================================================
sndchr:
   clr scon.1 ; clear the tx buffer full flag.
   mov sbuf,a ; put chr in sbuf
txloop:
   jnb scon.1, txloop ; wait till chr is sent
   ret
;===============================================================
; subroutine getchr
; this routine reads in a chr from the serial port and saves it
; in the accumulator.
;===============================================================
getchr:
   jnb ri, getchr ; wait till character received
   mov a, sbuf ; get character
   anl a, #7fh ; mask off 8th bit
   clr ri ; clear serial status bit
   ret
;===============================================================
; subroutine crlf
; crlf sends a carriage return line feed out the serial port
;===============================================================
crlf:
   mov a, #0ah ; print lf
   lcall sndchr
cret:
   mov a, #0dh ; print cr
   lcall sndchr
   ret
;===============================================================
; subroutine prthex
; this routine takes the contents of the acc and prints it out
; as a 2 digit ascii hex number.
;===============================================================
prthex:
   push acc
   lcall binasc ; convert acc to ascii
   lcall sndchr ; print first ascii hex digit
   mov a, r2 ; get second ascii hex digit
   lcall sndchr ; print it
   pop acc
   ret
;===============================================================
; subroutine binasc
; binasc takes the contents of the accumulator and converts it
; into two ascii hex numbers. the result is returned in the
; accumulator and r2.
;===============================================================
binasc:
   mov r2, a ; save in r2
   anl a, #0fh ; convert least sig digit.
   add a, #0f6h ; adjust it
   jnc noadj1 ; if a-f then readjust
   add a, #07h
noadj1:
   add a, #3ah ; make ascii
   xch a, r2 ; put result in reg 2
   swap a ; convert most sig digit
   anl a, #0fh ; look at least sig half of acc
   add a, #0f6h ; adjust it
   jnc noadj2 ; if a-f then re-adjust
   add a, #07h
noadj2:
   add a, #3ah ; make ascii
   ret


.org 1000h
sintable:
.db 07fh, 082h, 085h, 088h, 08bh, 08fh, 092h, 095h
.db 098h, 09bh, 09eh, 0a1h, 0a4h, 0a7h, 0aah, 0adh
.db 0b0h, 0b3h, 0b6h, 0b8h, 0bbh, 0beh, 0c1h, 0c3h
.db 0c6h, 0c8h, 0cbh, 0cdh, 0d0h, 0d2h, 0d5h, 0d7h
.db 0d9h, 0dbh, 0ddh, 0e0h, 0e2h, 0e4h, 0e5h, 0e7h
.db 0e9h, 0ebh, 0ech, 0eeh, 0efh, 0f1h, 0f2h, 0f4h
.db 0f5h, 0f6h, 0f7h, 0f8h, 0f9h, 0fah, 0fbh, 0fbh
.db 0fch, 0fdh, 0fdh, 0feh, 0feh, 0feh, 0feh, 0feh
.db 0ffh, 0feh, 0feh, 0feh, 0feh, 0feh, 0fdh, 0fdh
.db 0fch, 0fbh, 0fbh, 0fah, 0f9h, 0f8h, 0f7h, 0f6h
.db 0f5h, 0f4h, 0f2h, 0f1h, 0efh, 0eeh, 0ech, 0ebh
.db 0e9h, 0e7h, 0e5h, 0e4h, 0e2h, 0e0h, 0ddh, 0dbh
.db 0d9h, 0d7h, 0d5h, 0d2h, 0d0h, 0cdh, 0cbh, 0c8h
.db 0c6h, 0c3h, 0c1h, 0beh, 0bbh, 0b8h, 0b6h, 0b3h
.db 0b0h, 0adh, 0aah, 0a7h, 0a4h, 0a1h, 09eh, 09bh
.db 098h, 095h, 092h, 08fh, 08bh, 088h, 085h, 082h
.db 07fh, 07ch, 079h, 076h, 073h, 06fh, 06ch, 069h
.db 066h, 063h, 060h, 05dh, 05ah, 057h, 054h, 051h
.db 04eh, 04bh, 048h, 046h, 043h, 040h, 03dh, 03bh
.db 038h, 036h, 033h, 031h, 02eh, 02ch, 029h, 027h
.db 025h, 023h, 021h, 01eh, 01ch, 01ah, 019h, 017h
.db 015h, 013h, 012h, 010h, 0fh, 0dh, 0ch, 0ah
.db 09h, 08h, 07h, 06h, 05h, 04h, 03h, 03h
.db 02h, 01h, 01h, 00h, 00h, 00h, 00h, 00h
.db 00h, 00h, 00h, 00h, 00h, 00h, 01h, 01h
.db 02h, 03h, 03h, 04h, 05h, 06h, 07h, 08h
.db 09h, 0ah, 0ch, 0dh, 0fh, 010h, 012h, 013h
.db 015h, 017h, 019h, 01ah, 01ch, 01eh, 021h, 023h
.db 025h, 027h, 029h, 02ch, 02eh, 031h, 033h, 036h
.db 038h, 03bh, 03dh, 040h, 043h, 046h, 048h, 04bh
.db 04eh, 051h, 054h, 057h, 05ah, 05dh, 060h, 063h
.db 066h, 069h, 06ch, 06fh, 073h, 076h, 079h, 07ch
;Compiler

;Required







##################
##################
./ex2/relayflip.asm

##################
##################
.ORG 0000h
ljmp start

.org 100h
start:
mov dptr, #0fe0Bh
mov a, #80h
movx @dptr, a

mov r1, #00h
lp:
mov dptr, #0fe09h
mov a, r1
cpl a
mov r1, a
movx @dptr, a
mov r2, #0ffh
wt:
mov r0, #0ffh
inwt:
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
djnz r0, inwt
mov r0, a
djnz r2, wt
sjmp lp
;

;




##################
##################
./ex4/2sec.asm

##################
##################
;Peripheral Base Addrs
.equ perph0, 0fe00h
.equ perph1, 0fe08h
.equ perph2, 0fe10h
.equ perph3, 0fe18h
.equ perph4, 0fe20h
.equ perph5, 0fe28h
.equ perph6, 0fe30h
.equ perph7, 0fe308h

; Interrupt types
.equ interrupt_timer_0, 82h

.org 0000h
ljmp start
.org 03h
ljmp ext_0_ISR
.org 0Bh
ljmp timer_0_ISR
.org 13h
ljmp ext_1_ISR
.org 1Bh
ljmp ext_1_ISR
.org 23h
ljmp serial_ISR

.org 100h
; Begin Main Block
start:
mov r1, #00h
mov r0, #0h
mov r2, #028h
mov r3, #01h
mov dptr, #0fe0Bh
mov a, #80h

movx @dptr, a
lcall init

loop:
    sjmp loop ; repeat

timer_0_ISR:
	djnz r0, noflip
		djnz r2, noflip
		mov r2, #28
		mov dptr, #0fe09h
		mov a, r1
		cpl a
		mov r1, a
		movx @dptr, a
		noflip:
	reti
timer_1_ISR:
ext_0_ISR:
ext_1_ISR:
serial_ISR:
    ; Protect data
    push acc
    push dpl
    push dph
    push b

    ; Restore data
    pop b
    pop dph
    pop dpl
    pop acc
    reti


init:
; Keypad
mov IE, #82h ; Enable interrupts, enable timer 0 interrupt
setb P3.2 ; disable the keypad chip
mov tmod, #02h ; set timer 0 for auto reload - mode 2

mov th0, #00h
    clr tcon ; run timer 0
setb TR0 ; Turn timer on
    ret
	




##################
##################
./ex4/5khz.asm

##################
##################
;Peripheral Base Addrs
.equ perph0, 0fe00h
.equ perph1, 0fe08h
.equ perph2, 0fe10h
.equ perph3, 0fe18h
.equ perph4, 0fe20h
.equ perph5, 0fe28h
.equ perph6, 0fe30h
.equ perph7, 0fe308h

; Interrupt types
.equ interrupt_timer_0, 82h

.org 0000h
ljmp start
.org 03h
ljmp ext_0_ISR
.org 0Bh
ljmp timer_0_ISR
.org 13h
ljmp ext_1_ISR
.org 1Bh
ljmp ext_1_ISR
.org 23h
ljmp serial_ISR

.org 100h
; Begin Main Block
start:
mov dptr, #0fe0Bh
mov a, #80h

movx @dptr, a
lcall init

loop:
    sjmp loop ; repeat

timer_0_ISR:
		mov dptr, #0fe09h
		mov a, r1
		cpl a
		mov r1, a
		movx @dptr, a
			reti
timer_1_ISR:
ext_0_ISR:
ext_1_ISR:
serial_ISR:
    ; Protect data
    push acc
    push dpl
    push dph
    push b

    ; Restore data
    pop b
    pop dph
    pop dpl
    pop acc
    reti


init:
; Keypad
mov IE, #82h ; Enable interrupts, enable timer 0 interrupt
setb P3.2 ; disable the keypad chip
mov tmod, #02h ; set timer 0 for auto reload - mode 2

mov th0, #164
    clr tcon ; run timer 0
setb TR0 ; Turn timer on
    ret
	




##################
##################
./ex5/external.asm

##################
##################
;Peripheral Base Addrs
.equ perph0, 0fe00h
.equ perph1, 0fe08h
.equ perph2, 0fe10h
.equ perph3, 0fe18h
.equ perph4, 0fe20h
.equ perph5, 0fe28h
.equ perph6, 0fe30h
.equ perph7, 0fe38h


.org 0000h
ljmp start

.org 100h
; Begin Main Block
start:
mov dptr, #0fe0Bh
mov a, #80h

movx @dptr, a
lcall init

loop:
    sjmp loop ; repeat

init:
; Keypad
setb P3.2 ; disable the keypad chip

mov dptr, #extdata
movx a, @dptr
mov r0, a



mov dptr, #0fe03h
mov a, #74h
movx @dptr,a 
mov a, #32h
movx @dptr, a

mov dptr, #0fe01h
mov a, #000h
movx @dptr, a
mov a, #0fh
movx @dptr, a

mov dptr, #0fe00h
mov a, #0ffh
movx @dptr, a
mov a, #00h
movx @dptr, a

ret

.org 1000h
extdata:
nop




##################
##################
./ex5/internal.asm

##################
##################
;Peripheral Base Addrs
.equ perph0, 0fe00h
.equ perph1, 0fe08h
.equ perph2, 0fe10h
.equ perph3, 0fe18h
.equ perph4, 0fe20h
.equ perph5, 0fe28h
.equ perph6, 0fe30h
.equ perph7, 0fe38h

; Interrupt types
.equ interrupt_timer_0, 82h

.org 0000h
ljmp start
.org 03h
ljmp ext_0_ISR
.org 0Bh
ljmp timer_0_ISR
.org 13h
ljmp ext_1_ISR
.org 1Bh
ljmp ext_1_ISR
.org 23h
ljmp serial_ISR

.org 100h
; Begin Main Block
start:
mov dptr, #0fe0Bh
mov a, #80h

movx @dptr, a
lcall init

loop:
    sjmp loop ; repeat

timer_0_ISR:
mov dptr, #0fe09h
mov a, r2
cpl a
mov r2, a
movx @dptr, a
mov th0, r1
mov a, r0
xch a, r1
mov r0, a
reti
timer_1_ISR:
ext_0_ISR:
ext_1_ISR:
serial_ISR:
reti


init:
; Keypad
mov IE, #82h ; Enable interrupts, enable timer 0 interrupt
setb P3.2 ; disable the keypad chip
mov tmod, #02h ; set timer 0 for auto reload - mode 2

mov dptr, #extdata
movx a, @dptr
mov r0, a

mov a, #0ffh
clr c
subb a, r0
mov r1, a
clr c

mov r2, #0ffh

mov th0, #164
    clr tcon ; run timer 0
setb TR0 ; Turn timer on
    ret
.org 1000h
extdata:
ret








##################
##################
./ex6/10chanscan.asm

##################
##################
;Peripheral Base Addrs
.equ perph0, 0fe00h
.equ perph1, 0fe08h
.equ perph2, 0fe10h
.equ perph3, 0fe18h
.equ perph4, 0fe20h
.equ perph5, 0fe28h
.equ perph6, 0fe30h
.equ perph7, 0fe308h

; Interrupt types
.equ interrupt_timer_0, 82h

.org 0000h
ljmp start
.org 03h
ljmp ext_0_ISR
.org 0Bh
ljmp timer_0_ISR
.org 13h
ljmp ext_1_ISR
.org 1Bh
ljmp ext_1_ISR
.org 23h
ljmp serial_ISR

.org 100h
; Begin Main Block
start:
mov dptr, #0fe0Bh
mov a, #80h

movx @dptr, a
lcall init

loop:
    sjmp loop ; repeat

timer_0_ISR:
djnz r0, nochange
mov r0, #0ah
djnz r2, nochange
; Cycle a port
mov dptr, #0fe09h
mov a, r1
rlc a
mov r1, a
movx @dptr, a
; If carry, swap to C port
jnc nochange2
mov r1, #0h
mov r3, #1h
clr c

nochange2:

; Cycle C port
mov dptr, #0fe0ah
mov a, r3
movx @dptr, a
rlc a
mov r3, a
; if carry, then swap to port B
jnc nochange
mov r1, #1h
mov r3, #0h
clr c

nochange:
; Display either
orl a, r1
mov p1,a
reti
timer_1_ISR:
ext_0_ISR:
ext_1_ISR:
serial_ISR:
    ; Protect data
    push acc
    push dpl
    push dph
    push b

    ; Restore data
    pop b
    pop dph
    pop dpl
    pop acc
    reti


init:
; Keypad
mov IE, #82h ; Enable interrupts, enable timer 0 interrupt
setb P3.2 ; disable the keypad chip
mov tmod, #02h ; set timer 0 for auto reload - mode 2
mov r1, #01h
mov r0, #00h
mov th0, #00h
    clr tcon ; run timer 0
setb TR0 ; Turn timer on
    ret
	
	;
	
	;




##################
##################
./ex6/armcont.asm

##################
##################
;Peripheral Base Addrs
.equ perph0, 0fe00h
.equ perph1, 0fe08h
.equ perph2, 0fe10h
.equ perph3, 0fe18h
.equ perph4, 0fe20h
.equ perph5, 0fe28h
.equ perph6, 0fe30h
.equ perph7, 0fe308h

; Interrupt types
.equ interrupt_timer_0, 82h

.org 0000h
ljmp start
.org 03h
ljmp ext_0_ISR
.org 0Bh
ljmp timer_0_ISR
.org 13h
ljmp ext_1_ISR
.org 1Bh
ljmp ext_1_ISR
.org 23h
ljmp serial_ISR

.org 100h
; Begin Main Block
start:
mov dptr, #0fe0Bh
mov a, #80h

movx @dptr, a
lcall init
mov P1, #01111111b
mov a, #00h
lcall portB
lcall portC
clr c
loop:
	lcall clrports
	cpl p1.0
	cpl p1.7
	cpl c
	jnb p1.1, wrist
	jnb p1.2, shoulder
	jnb p1.4, base
	jnb p1.5, elbow
	jnb p1.6, gripper
    sjmp loop ; repeat
	
shoulder:
mov a, #01h
jc wristNorm
rlc a
wristNorm:
lcall portB
wristWait:
jnb p1.2, wristWait
sjmp loop

base:
mov a, #04h
jc shoulderNorm
rlc a
shoulderNorm:
lcall portB
shoulderWait:
jnb p1.4, shoulderWait
sjmp loop


elbow:
mov a, #10h
jc baseNorm
rlc a
baseNorm:
lcall portB
baseWait:
jnb p1.5, baseWait
sjmp loop

gripper:
mov a, #40h
jc elbowNorm
rlc a
elbowNorm:
lcall portB
elbowWait:
jnb p1.6, elbowWait
sjmp loop

wrist:
mov a, #01h
jc gripperNorm
rlc a
gripperNorm:
lcall portC
gripperWait:
jnb p1.1, gripperWait
sjmp loop

portB:
mov dptr, #0fe09h
movx @dptr, a
ret
portC:
mov dptr, #0fe0Ah
movx @dptr, a
ret
clrports:
mov a, #00h
mov dptr, #0fe09h
movx @dptr, a
mov dptr, #0fe0Ah
movx @dptr, a
ret
timer_0_ISR:
reti
timer_1_ISR:
ext_0_ISR:
ext_1_ISR:
serial_ISR:
    ; Protect data
    push acc
    push dpl
    push dph
    push b

    ; Restore data
    pop b
    pop dph
    pop dpl
    pop acc
    reti


init:
; Keypad
;mov IE, #82h ; Enable interrupts, enable timer 0 interrupt
setb P3.2 ; disable the keypad chip
    ret
	
	;
	
	;




##################
##################
./ex6/finalarm.asm

##################
##################
.org 0000h
ljmp firststart



; Interrupt ISRs
.org 03h
ljmp ext_0_ISR
.org 0Bh
ljmp timer_0_ISR
.org 13h
ljmp ext_1_ISR
.org 1Bh
ljmp timer_1_ISR
.org 23h
ljmp serial_ISR



; Scratchpad
.org 30h
.equ portBstate, 30h
.equ nextportBstate, 31h
.equ portCstate, 32h
.equ nextportCstate, 33h
.equ th1state, 34h
.equ nextth1state, 35h
.org 40h


; ####################
; # Begin Main Block #
; ####################

.org 100h
; On 
firststart:
mov r4, #164
start:
lcall init
loop:
    sjmp loop ; repeat

; ##############
; # Initialize #
; ##############

init:
; Setup the extra ports chip
mov dptr, #0fe0Bh
mov a, #80h
movx @dptr, a

; Enable Interrupts for timers 0 and 1 and external 1
mov IE, #8Eh

; Disable Keypad Chip
setb P3.2

; Setup r0 for scan mode (will be mov'ed into P1)
mov r0, #01111111b

; Clear out the external Ports
mov a, #00h
lcall portB
lcall portC

; Clear the carry bit
clr c

; Setup the initial states of the ports (switch between 0 and 0)
mov portBstate, #0
mov nextportBstate, #0
mov portCstate, #0
mov nextportCstate, #0


; Set Both timers for mode 2 - 8 bit auto reload
mov tmod, #22h

; Setup the timers to run
lcall timer1enable
mov th0, #50

mov r6, #0
; Enable only timer 1
clr tcon
setb tr0
setb tr1
;setb pt1 ; elevate the pwm timer priveleges
setb it1
    ret


; ###########################
; # Enable timer 1 for pwm #
; ###########################
timer1enable:
; Move the value in r4 to th1
mov th1, r4
; Compute the differences (so that it sums to the constant)
mov a, #0ffh
clr c
subb a, r4
mov th1state, a
mov nextth1state, r4
clr c
; raise priority
setb pt1
ret

; #####################
; # Arm control funcs #
; #####################



elbow:
mov a, #0ffh
clr c
add a, r6
mov a, #00010000b
jc elbowNorm
rl a
elbowNorm:
mov portBstate, a
mov portCstate, #00h

lcall timer1enable

elbowWait:
jnb p1.5, elbowWait
sjmp clrports

gripper:
mov a, #0ffh
clr c
add a, r6
mov a, #01000000b
jc gripperNorm
rl a
gripperNorm:
mov portBstate, a
mov portCstate, #00h

lcall timer1enable

gripperWait:
jnb p1.6, gripperWait
sjmp clrports

wrist:
mov a, #0ffh
clr c
add a, r6
mov a, #00000001b
jc wristNorm
rl a
wristNorm:
mov portCstate, a
mov portBstate, #00h
lcall timer1enable
wristWait:
jnb p1.1, wristWait
sjmp clrports
; Use Timer 0 for the arm controller
timer_0_ISR:
clr tr0
push acc

; Disable the keypad
setb P3.2 ; disable the encoder chip

; IF TIMER 0 ISR WORKING, THEN IT SHOULD BE SQ WAVE on P3.4--- debug
cpl p3.4
; ----- debug

; flip the state of r0's msb/lsb
xch a, r0	
xrl a, #81h
xch a, r0

; TODO: Find a better hack than this
xch a, r6
xrl a, #1
xch a, r6

mov p1, r0 ; setup port 1 for a scan

; Do Scan, run motors
jnb p1.1, wrist
jnb p1.2, shoulder
jnb p1.4, base
jnb p1.5, elbow
jnb p1.6, gripper

clrports:
; No interruption!
clr EA
; clear port states
clr portBstate
clr portCstate
clr nextPortCstate
clr nextportBstate
mov a, #00h
lcall portB
lcall portC
; re-enable the keypad encoder chip
clr P3.2
    mov p1, #0ffh ; enable port 1 as full input
setb tr0
setb EA
pop acc
reti
shoulder:
mov a, #0ffh
clr c
add a, r6
mov a, #00000001b
jc shoulderNorm
rl a
shoulderNorm:
mov portBstate, a
mov portCstate, #00h

lcall timer1enable

shoulderWait:
jnb p1.2, shoulderWait
sjmp clrports

base:
mov a, #0ffh
clr c
add a, r6
mov a, #00000100b
jc baseNorm
rl a
baseNorm:
mov portBstate, a
mov portCstate, #00h

lcall timer1enable

baseWait:
jnb p1.4, baseWait
sjmp clrports

; Use Timer 1 for pwm
timer_1_ISR:
push acc
; Swap port C states
xch a, portCstate
xch a, nextportCstate
xch a, portCstate
; Swap port B states
xch a, portBstate
xch a, nextportBstate
xch a, portBstate

; Swap pwm state
xch a, th1state
xch a, nextth1state
xch a, th1state

mov th1, th1state

; push the values out to the port!
mov a, portBstate
lcall portB
mov a, portCstate
lcall portC

; IF TIMER 0 ISR WORKING, THEN IT SHOULD BE SQ WAVE on P3.5 WHEN MOVING ARM--- debug
cpl p3.5
; ----- debug

pop acc
reti

portB:
mov dptr, #0fe09h
movx @dptr, a
ret

portC:
mov dptr, #0fe0Ah
movx @dptr, a
ret


ext_1_ISR:
	push acc
	clr ea
    mov a, P1 ; read p1
    lcall bin ; convert to a number 0-15
    ljmp nway; jump to the nway, then it will jump back
    wait: ; wait for the data to clear
        jb p3.3, wait
	setb ea
	pop acc
reti

bin:
    anl a, #0Fh ; Mask off the upper nibble
    inc a ; increment so that we go past the ret opcode
    movc a, @a+pc ; PC has the ret below, so we go a+pc -> a to pull from table
    ret
    .db 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15

;===============================================================
; subroutine nway
; this routine branches (jumps) to the appropriate monitor
; routine. the routine number is in r2
;================================================================
nway:
   mov dptr, #jumtab ;point dptr at beginning of jump table
   rl a ;multiply by two.
   mov b, a
   inc a ;load first vector onto stack
   movc a, @a+dptr ; " "
   push acc ; " "
   mov a, b ;load acc with monitor routine number
   movc a, @a+dptr ;load second vector onto stack
   push acc ; " "
   ret ;jump to start of monitor routine

;=================================================================
; pattern jump table
;=================================================================
jumtab:
   .dw no ; command 'c' 03
   .dw d1; command '@' 00
   .dw d2 ; command 'a' 01
   .dw d3 ; command 'b' 02
   .dw no ; command 'd' 04 used
   .dw no ; command 'e' 05
   .dw no ; command 'f' 06
   .dw no ; command 'g' 07 used
   .dw no ; command 'h' 08
   .dw no ; command 'i' 09
   .dw no ; command 'j' 0a
   .dw no ; command 'k' 0b
   .dw no ; command 'l' 0c
   .dw no ; command 'm' 0d
   .dw no ; command 'n' 0e
   .dw no ; command 'o' 0f
no:
mov r4, #0
lcall timer1enable
ljmp wait

d1:
mov r4, #64
lcall timer1enable

ljmp wait
d2:
mov r4, #128
lcall timer1enable

ljmp wait
d3:
mov r4, #255
lcall timer1enable

ljmp wait
ext_0_ISR:
serial_ISR:
;

;




##################
##################
./ex6/ogodwhy.asm

##################
##################
.org 0000h
ljmp start



; Interrupt ISRs
.org 03h
ljmp ext_0_ISR
.org 0Bh
ljmp timer_0_ISR
.org 13h
ljmp ext_1_ISR
.org 1Bh
ljmp timer_1_ISR
.org 23h
ljmp serial_ISR



; Scratchpad
.org 30h
.equ portBstate, 30h
.equ nextportBstate, 31h
.equ portCstate, 32h
.equ nextportCstate, 33h
.equ th1state, 34h
.equ nextth1state, 35h
.org 40h


; ####################
; # Begin Main Block #
; ####################

.org 100h
start:
lcall init
loop:
    sjmp loop ; repeat

; ##############
; # Initialize #
; ##############

init:
	; Setup the extra ports chip
	mov dptr, #0fe0Bh
	mov a, #80h
	movx @dptr, a
	
	; Enable Interrupts for timers 0 and 1 and external 1
	mov IE, #8Eh
	
	; Disable Keypad Chip
	setb P3.2
	
	; Setup r0 for scan mode (will be mov'ed into P1)
	mov r0, #01111111b
	
	; Clear out the external Ports
	mov a, #00h
	lcall portB
	lcall portC

	; Clear the carry bit
	clr c

	; Setup the initial states of the ports (switch between 0 and 0)
	mov portBstate, #0
	mov nextportBstate, #0
	mov portCstate, #0
	mov nextportCstate, #0
	
	
	; Set Both timers for mode 2 - 8 bit auto reload
	mov tmod, #22h
	
	; Setup the timers to run
	mov th1state, #91
	mov r4, #164
	mov th0, #50
	
	mov r6, #0
	; Enable only timer 1
	clr tcon
	setb tr0
	setb tr1
	;setb pt1 ; elevate the pwm timer priveleges
	setb it1
    ret


; ###########################
; # Enable timer 1 for pwm  #
; ###########################
timer1enable:
	; Move the value in r4 to th1
	mov th1, r4
	; Compute the differences (so that it sums to the constant)
	mov a, #0ffh
	clr c
	subb a, r4
	mov th1state, a
	mov nextth1state, r4
	clr c
	; raise priority
	setb pt1
	ret

; #####################
; # Arm control funcs #
; #####################



	elbow:
			mov a, #0ffh
		clr c
		add a, r6
		mov a, #00010000b
		jc elbowNorm
		rl a
		elbowNorm:
		mov portBstate, a
		mov portCstate, #00h

			lcall timer1enable

		elbowWait:
		jnb p1.5, elbowWait
		sjmp clrports

	gripper:
			mov a, #0ffh
		clr c
		add a, r6
		mov a, #01000000b
		jc gripperNorm
		rl a
		gripperNorm:
		mov portBstate, a
		mov portCstate, #00h

		lcall timer1enable

		gripperWait:
		jnb p1.6, gripperWait
		sjmp clrports

	wrist:
		mov a, #0ffh
		clr c
		add a, r6
		mov a, #00000001b
		jc wristNorm
		rl a
		wristNorm:
		mov portCstate, a
		mov portBstate, #00h
		lcall timer1enable
		wristWait:
		jnb p1.1, wristWait
		sjmp clrports
; Use Timer 0 for the arm controller
timer_0_ISR:
	clr tr0
	push acc
	
	; Disable the keypad
	setb P3.2 ; disable the encoder chip
	
	; IF TIMER 0 ISR WORKING, THEN IT SHOULD BE SQ WAVE on P3.4--- debug
	cpl p3.4
	; ----- debug

	; flip the state of r0's msb/lsb
	xch a, r0	
	xrl a, #81h  
	xch a, r0
	
	; TODO: Find a better hack than this
	xch a, r6
	xrl a, #1
	xch a, r6

	mov p1, r0 ; setup port 1 for a scan

	; Do Scan, run motors
	jnb p1.1, wrist
	jnb p1.2, shoulder
	jnb p1.4, base
	jnb p1.5, elbow
	jnb p1.6, gripper
	
	clrports:
	; No interruption!
	clr EA
	; clear port states
	clr portBstate
	clr portCstate
	clr nextPortCstate
	clr nextportBstate
	mov a, #00h
	lcall portB
	lcall portC
	; re-enable the keypad encoder chip
	clr P3.2 
    mov p1, #0ffh ; enable port 1 as full input
	setb tr0
	setb EA
	pop acc
reti
	shoulder:
		mov a, #0ffh
		clr c
		add a, r6
		mov a, #00000001b
		jc shoulderNorm
		rl a
		shoulderNorm:
		mov portBstate, a
		mov portCstate, #00h

			lcall timer1enable

		shoulderWait:
		jnb p1.2, shoulderWait
		sjmp clrports

	base:
		mov a, #0ffh
		clr c
		add a, r6
		mov a, #00000100b
		jc baseNorm
		rl a
		baseNorm:
		mov portBstate, a
		mov portCstate, #00h

		lcall timer1enable

		baseWait:
		jnb p1.4, baseWait
		sjmp clrports

; Use Timer 1 for pwm
timer_1_ISR:
	push acc
	; Swap port C states
	xch a, portCstate
	xch a, nextportCstate
	xch a, portCstate
	; Swap port B states
	xch a, portBstate
	xch a, nextportBstate
	xch a, portBstate
	
	; Swap pwm state
	xch a, th1state
	xch a, nextth1state
	xch a, th1state
	mov th1, th1state
	
	; push the values out to the port!
	mov a, portBstate
	lcall portB
	mov a, portCstate
	lcall portC
	
	; IF TIMER 0 ISR WORKING, THEN IT SHOULD BE SQ WAVE on P3.5 WHEN MOVING ARM--- debug
	cpl p3.5
	; ----- debug
	
	pop acc
reti

portB:
	mov dptr, #0fe09h
	movx @dptr, a
ret

portC:
	mov dptr, #0fe0Ah
	movx @dptr, a
ret


ext_1_ISR:
    mov a, P1 ; read p1
    lcall bin ; convert to a number 0-15
    ljmp nway; jump to the nway, then it will jump back
    wait: ; wait for the data to clear
        jb p3.3, wait
reti

bin:
    anl a, #0Fh ; Mask off the upper nibble
    inc a ; increment so that we go past the ret opcode
    movc a, @a+pc ; PC has the ret below, so we go a+pc -> a to pull from table
    ret
    .db 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15

;===============================================================
; subroutine nway
; this routine branches (jumps) to the appropriate monitor
; routine. the routine number is in r2
;================================================================
nway:
   mov dptr, #jumtab ;point dptr at beginning of jump table
   rl a ;multiply by two.
   mov b, a
   inc a ;load first vector onto stack
   movc a, @a+dptr ; " "
   push acc ; " "
   mov a, b ;load acc with monitor routine number
   movc a, @a+dptr ;load second vector onto stack
   push acc ; " "
   ret ;jump to start of monitor routine

;=================================================================
; pattern jump table
;=================================================================
jumtab:
   .dw d1; command '@' 00
   .dw d2 ; command 'a' 01
   .dw d3 ; command 'b' 02
   .dw no ; command 'c' 03
   .dw no ; command 'd' 04 used
   .dw no ; command 'e' 05
   .dw no ; command 'f' 06
   .dw no ; command 'g' 07 used
   .dw no ; command 'h' 08
   .dw no ; command 'i' 09
   .dw no ; command 'j' 0a
   .dw no ; command 'k' 0b
   .dw no ; command 'l' 0c
   .dw no ; command 'm' 0d
   .dw no ; command 'n' 0e
   .dw no ; command 'o' 0f
no:
mov r4, #32
lcall timer1enable
ljmp wait

d1:
mov r4, #64
lcall timer1enable

ljmp wait
d2:
mov r4, #128
lcall timer1enable

ljmp wait
d3:
mov r4, #200
lcall timer1enable

ljmp wait
ext_0_ISR:
serial_ISR:
;

;




##################
##################
./ex7/spinduide.asm

##################
##################
;Peripheral Base Addrs
.equ perph0, 0fe00h
.equ perph1, 0fe08h
.equ perph2, 0fe10h
.equ perph3, 0fe18h
.equ perph4, 0fe20h
.equ perph5, 0fe28h
.equ perph6, 0fe30h
.equ perph7, 0fe308h

; Interrupt types
.equ interrupt_timer_0, 82h

.org 0000h
ljmp start
.org 03h
ljmp ext_0_ISR
.org 0Bh
ljmp timer_0_ISR
.org 13h
ljmp ext_1_ISR
.org 1Bh
ljmp ext_1_ISR
.org 23h
ljmp serial_ISR

.org 100h
; Begin Main Block
start:
mov r1, #00h
mov r0, #0h
mov r2, #01h
mov r3, #01h
mov dptr, #0fe0Bh
mov a, #80h
mov r6, #26

movx @dptr, a
lcall init

loop:
    sjmp loop ; repeat

timer_0_ISR:
djnz r0, noflip
djnz r2, noflip
djnz r6, nokill
clr ea
reti
nokill:
mov r2, #15
mov dptr, #0fe09h
mov a, r1
rr a
mov r1, a
mov p1, a
movx @dptr, a
noflip:
reti
timer_1_ISR:
ext_0_ISR:
ext_1_ISR:
serial_ISR:
    ; Protect data
    push acc
    push dpl
    push dph
    push b

    ; Restore data
    pop b
    pop dph
    pop dpl
    pop acc
    reti


init:
; Keypad
mov IE, #82h ; Enable interrupts, enable timer 0 interrupt
setb P3.2 ; disable the keypad chip
mov tmod, #02h ; set timer 0 for auto reload - mode 2
mov r1, #0EEh
mov th0, #00h
    clr tcon ; run timer 0
setb TR0 ; Turn timer on
    ret





##################
##################
./ex8/readadc.asm

##################
##################
.org 00h
ljmp start

.org 100h
start:
loop:
lcall get
mov p1, a
sjmp loop

get:
mov dptr, #0fe10h
mov a, #0FFh
movx @dptr, a
mov r0, #100
converting:
djnz r0, converting
movx a, @dptr
ret




##################
##################
./ex9/works.asm

##################
##################
.org 00h
ljmp start
.org 0Bh
ljmp timer_0_ISR


.org 30h
.equ getADCdelay, 30h
.equ scanCount, 31h
.org 40h
.org 100h
; Begin Main Block
start:
lcall init
lcall getchr
setb tr0
sjmp start


scanLights:
    push dpl
    push dph

    mov scanCount, #15
    continueScan:
        ; Put the light addr on port A
        mov dptr, #0fe08h
        mov a, scanCount
        movx @dptr, a
        
        mov r6, #010h
        mov r7, #0h
        scanWait:
        djnz r7, scanWait
        djnz r6, scanWait
        

        lcall getADC

        pop dph
        pop dpl


        movx @dptr, a
        inc dpl

        push dpl
        push dph
        
        djnz scanCount, continueScan


        ; one more hit
        ; Put the light addr on port A
        mov dptr, #0fe08h
        mov a, scanCount
        movx @dptr, a
        
        mov r6, #0f0h
        mov r7, #0h
        scanWait2:
        djnz r7, scanWait2
        djnz r6, scanWait2
        

        lcall getADC

        pop dph
        pop dpl
        movx @dptr, a

    ret

getADC:


    mov dptr, #0fe10h
    mov a, #0FFh
    movx @dptr, a
    mov getADCdelay, #100
    converting:
    djnz getADCdelay, converting
    movx a, @dptr

    ret
printoddtable:
; Wait for space
;lcall getchr
;cjne a, #32, printoddtable

mov dptr, #starttab
mov r7, #24
outerloop:
inc dph
mov dpl, #0
mov r6, #16
innerloop:
inc dpl
movx a, @dptr
lcall prthex
mov a, #32
lcall sndchr
djnz r6, innerloop
mov a, #10
lcall sndchr
mov a, #13
lcall sndchr
djnz r7, outerloop
ret


timer_0_ISR:
    djnz r0, noflip
    djnz r2, noflip
    djnz r3, nokill
    clr tr0
    lcall printoddtable
    reti
	
    nokill:
		mov dptr, #starttab
	xch a, dph
	add a, r3
	xch a, dph
    lcall scanLights
	
    mov r2, #15
    mov dptr, #0fe09h
    mov a, r1
    rr a
    mov r1, a
    mov p1, a
    movx @dptr, a
	

    noflip:
    reti
    
init:
; Keypad
mov IE, #82h ; Enable interrupts, enable timer 0 interrupt
setb P3.2 ; disable the keypad chip
mov tmod, #22h ; set timer 0 for auto reload - mode 2
mov r1, #0EEh
mov th0, #00h
mov th1, #253
clr tcon ; run timer 0

mov scon, #54h ; set serial control reg for

mov r0, #0h
mov r2, #01h
mov dptr, #0fe0Bh
mov a, #80h
mov r3, #26

movx @dptr, a

; Make sure stepper is primed
mov dptr, #0fe09h
    mov a, r1
    mov p1, a
    movx @dptr, a


setb TR1
    ret
;*****************************************************************
; general purpose routines
;*****************************************************************
;===============================================================
; subroutine sndchr
; this routine takes the chr in the acc and sends it out the
; serial port.
;===============================================================
sndchr:
   clr scon.1 ; clear the tx buffer full flag.
   mov sbuf,a ; put chr in sbuf
txloop:
   jnb scon.1, txloop ; wait till chr is sent
   ret
;===============================================================
; subroutine getchr
; this routine reads in a chr from the serial port and saves it
; in the accumulator.
;===============================================================
getchr:
   jnb ri, getchr ; wait till character received
   mov a, sbuf ; get character
   anl a, #7fh ; mask off 8th bit
   clr ri ; clear serial status bit
   ret
;===============================================================
; subroutine prthex
; this routine takes the contents of the acc and prints it out
; as a 2 digit ascii hex number.
;===============================================================
prthex:
   push acc
   lcall binasc ; convert acc to ascii
   lcall sndchr ; print first ascii hex digit
   mov a, r5 ; get second ascii hex digit
   lcall sndchr ; print it
   pop acc
   ret
;===============================================================
; subroutine binasc
; binasc takes the contents of the accumulator and converts it
; into two ascii hex numbers. the result is returned in the
; accumulator and r2.
;===============================================================
binasc:
   mov r5, a ; save in r2
   anl a, #0fh ; convert least sig digit.
   add a, #0f6h ; adjust it
   jnc noadj1 ; if a-f then readjust
   add a, #07h
noadj1:
   add a, #3ah ; make ascii
   xch a, r5 ; put result in reg 2
   swap a ; convert most sig digit
   anl a, #0fh ; look at least sig half of acc
   add a, #0f6h ; adjust it
   jnc noadj2 ; if a-f then re-adjust
   add a, #07h
noadj2:
   add a, #3ah ; make ascii
   ret


.org 1000h
starttab:
