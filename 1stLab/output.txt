###########################################################################################
;;; EX1
;;; Bullet number 2
;;; Used to see the MSB of the LED bank
.org 8000h
	mov P1, #00h ; Clear the port
	mov P1, #80h ; Set the MSB
loop:
	sjmp loop



###########################################################################################
;;; EX1
;;; Bullet number 3
;;; Set only the msb, set the lsb, then clear the msb
.org 8000h
    mov P1, #80h
    setb P1.0
    clr P1.7
loop:
    sjmp loop
;Leave this here

;If you want to be able to compile



###########################################################################################
;;; EX1
;;; Bullet number 4

;;; Try to set a fun pattern
.org 8000h
    mov P1, #10101010b ; Set an alternating pattern with binary
    loop:
        sjmp loop
;Leave this here

;If you want to be able to compile



###########################################################################################
;;; EX1
;;; bullet number 5
;;; bounce pattern
.org 8000h
    ; Move in then move out
    mov p1, #10000001b
    mov r1, #0ffh
    lcall wait
    mov p1, #01000010b
    mov r1, #0ffh
    lcall wait
    mov p1, #00100100b
    mov r1, #0ffh
    lcall wait
    mov r1, #0ffh
    mov p1, #00011000b
    lcall wait
    ;;;expand out
    mov p1, #00011000b
    mov r1, #0ffh
    lcall wait
    mov p1, #00100100b
    mov r1, #0ffh
    lcall wait
    mov p1, #01000010b
    mov r1, #0ffh
    lcall wait
    mov r1, #0ffh
    mov p1, #10000001b
    lcall wait
    ajmp 8000h
;;; the wait function gets its data from r1 and does increments of ~ #60h instructions
wait:
    mov r0,#60h ; 60h cycles per subwait (+ call costs)
    lcall subwait
    djnz r1, wait
    ret
subwait:
    djnz r0,subwait ; clear out r0
    ret

;leave this here

;if you want to be able to compile







###########################################################################################
;;; EX2
;;; Simple typewrited program to "echo" text input from serial
.org 00h             ; power up and reset vector
    mov P1, #00h
    ljmp start       ; when the micro wakes up, jump to the beginning of
                     ; the main body or loop in the program called start
.org 100h            ; and located at 100h in memory
start:
    lcall init       ; start the serial port by calling subroutine init
    loop:            ; Now, endlessly repeat a loop that
        lcall getchr ; <- gets a char from pc keyboard
        lcall sndchr ; -> and echoes on the screen
    sjmp loop
init:
    mov tmod, #20h  ; set timer 1 for auto reload - mode 2
    mov tcon, #40h  ; run timer 1
    mov th1,  #253        ; set 9600 baud with xtal=11.059mhz
    mov scon, #54h  ; set serial control reg for 
    ret
getchr:
    jnb ri, getchr
    mov a, sbuf
    anl a, #7fh
    clr ri
    ret
sndchr:
    clr scon.1
    mov sbuf,a
txloop:
    jnb scon.1, txloop
    RET
;Leave this here







###########################################################################################
;If you want to be able to compile
;;; EX3
;;; bullet point 1 
;;; Output key press on LED bank
.org 00h             ; power up and reset vector
    mov P1, #00h
    ljmp start       ; when the micro wakes up, jump to the beginning of
                     ; the main body or loop in the program called start
.org 100h            ; and located at 100h in memory
start:
    lcall init       ; start the serial port by calling subroutine init
    loop:            ; Now, endlessly repeat a loop that
        lcall getchr ; <- gets a char from pc keyboard
	mov P1, acc  ; Show the character on LED bank
        lcall sndchr ; -> and echoes on the screen
    sjmp loop
init:
    mov tmod, #20h  ; set timer 1 for auto reload - mode 2
    mov tcon, #40h  ; run timer 1
    mov th1,  #253        ; set 9600 baud with xtal=11.059mhz
    mov scon, #54h  ; set serial control reg for 
    ret
getchr:
    jnb ri, getchr
    mov a, sbuf
    anl a, #7fh
    clr ri
    ret
sndchr:
    clr scon.1
    mov sbuf,a
txloop:
    jnb scon.1, txloop
    RET
;Leave this here

;If you want to be able to compile







###########################################################################################
;;; EX3
;;; Bullet point 2
;;; Get 65 chars from keyboard and then line wrap
.org 00h             ; power up and reset vector
    mov P1, #00h
    ljmp start       ; when the micro wakes up, jump to the beginning of
                     ; the main body or loop in the program called start
.org 100h            ; and located at 100h in memory
start:
    lcall init       ; start the serial port by calling subroutine init
    loop:            ; Now, endlessly repeat a loop that
        lcall getchr ; <- gets a char from pc keyboard
	mov P1, acc  ; Show the character on LED bank
        lcall sndchr ; -> and echoes on the screen
	sjmp clrf
clrf:
    djnz r1, loop    ; return to loop if not base case
    mov r1, #65      ; reset counter
    mov a, #10       ; newline
    lcall sndchr
    mov a, #13       ; carriage return
    lcall sndchr
    sjmp loop        ; return to loop
	
init:
    mov r1, #65     ; initialize line size to 65
    mov tmod, #20h  ; set timer 1 for auto reload - mode 2
    mov tcon, #40h  ; run timer 1
    mov th1,  #253        ; set 9600 baud with xtal=11.059mhz
    mov scon, #54h  ; set serial control reg for
    ret
getchr:
    jnb ri, getchr
    mov a, sbuf
    anl a, #7fh
    clr ri
    ret
sndchr:
    clr scon.1
    mov sbuf,a
txloop:
    jnb scon.1, txloop
    RET
;Leave this here

;If you want to be able to compile








###########################################################################################
;;; EX4
;;; Bullet point 1
;;; Calculator which can add/subtract 2 3 digit decimal numbers
.org 00h             ; power up and reset vector
    ljmp start       ; when the micro wakes up, jump to the beginning of
                     ; the main body or loop in the program called start
.org 100h            ; and located at 100h in memory
start:
    lcall init           ; start the serial port by calling subroutine init
    mov r1, #3           ; set the num digits
    mov acc, #13         ; set the first acc to be a newline
    loop:                ; Now, endlessly repeat a loop that
        mov P1, acc      ; put the acc on the led
        lcall sndchr     ; output the acc
        lcall newline    ; put out a newline
        lcall num        ; get first number
        push acc         ; push result onto stack
        lcall num        ; get second number
        pop 050h         ; retrieve first number
        mov r7, a        ; put the acc to a register
        lcall op         ; get the operator

        xch a, r7                ; swap the operator and second number
        xch a, 050h              ; swap the second and first number
        cjne r7, #2dh, addnum    ; jump if symbol not minus sign
            subb a, 050h         ; Subtract first - second
            sjmp loop
        addnum:
            add a, 050h        ;  add first and second numbers
            sjmp loop

;;Gets the operator from the client
op:
    lcall getchr
    lcall sndchr
    mov P1, acc;
    xch a, r5      ; store the acc result before newlining
    lcall newline
    xch a, r5      ; put the result back into acc
    ret
;; Send a new line (CAREFUL IT CLEARS ACC)
newline:
    ;; Send newlines
    mov a, #10 ; Newline
    lcall sndchr
    mov a, #13 ; Carriage Return
    lcall sndchr
    ret
num:
   lcall getchr  ; <- gets a char from pc keyboard
   lcall sndchr  ; -> and echoes on the screen
   anl a, #0Fh   ; Mask the upper nibble in accumulator to extract numeric
   mov P1, acc   ; Show the character on LED bank
   push acc      ; save the accumulator in stack
   sjmp clrf     ; check if enough digits

clrf:
    djnz r1, num    ; get another num if not enough digits
    lcall newline 
    ;; construct the number in a single byte
    pop 050h          ; pull off the smallest digit
    pop 051h          ; pull off the second smallest digit
    mov a, 051h       ; move the second into a 
    mov b, #10        ; move 10 into b
    mul ab            ; resize the second smallest digit
    add a, 050h       ; add the two together
    pop 050h          ; pull out another digit
    xch a, 050h       ; exchange the new digit and the result
    mov b, #100       ; move 100 into b
    mul ab            ; decimal placement on large digit
    add a, 050h       ; finish summing
    ;; return to caller
    mov r1, #3 ; Reset the number count
    ret
init:
    mov tmod, #20h        ; set timer 1 for auto reload - mode 2
    mov tcon, #40h        ; run timer 1
    mov th1,  #253        ; set 9600 baud with xtal=11.059mhz
    mov scon, #54h        ; set serial control reg for
    ret
getchr:
    jnb ri, getchr
    mov a, sbuf
    anl a, #7fh
    clr ri
    ret
sndchr:
    clr scon.1
    mov sbuf,a
txloop:
    jnb scon.1, txloop
    ret
;Leave this newline here

;If you want to be able to compile








###########################################################################################
;;; EX5
;;; Calculator with ascii numeric return
.org 00h             ; power up and reset vector
    ljmp start       ; when the micro wakes up, jump to the beginning of
                     ; the main body or loop in the program called start
.org 100h            ; and located at 100h in memory
start:
    lcall init           ; start the serial port by calling subroutine init
    mov r1, #3           ; set the num digits
    mov acc, #13         ; set the first acc to be a newline
    loop:                ; Now, endlessly repeat a loop that
        lcall newline    ; put out a newline
        lcall num        ; get first number
        push acc         ; push result onto stack
        lcall num        ; get second number
        pop 050h         ; retrieve first number
        mov r7, a        ; put the acc to a register
        lcall op         ; get the operator

        xch a, r7                ; swap the operator and second number
        xch a, 050h              ; swap the second and first number
        cjne r7, #2dh, addnum    ; jump if symbol not minus sign
            subb a, 050h
            lcall result
            sjmp loop
        addnum:
            add a, 050h        ;  add first and second numbers
            lcall result
            sjmp loop
result:
  mov P1, acc      ; put the acc on the led

  mov b, #10   ; Move down a decimal place
  div ab       ; perform the move
  push b       ; store remainder

  mov b, #10   ; move down a decimal place
  div ab       ; perform move
  push b       ; store remainder

  orl a, #30h  ; convert to ascii
  lcall sndchr ; Put out the highest digit

  pop acc      ; get the second highest digit
  orl a, #30h  ; convert to ascii
  lcall sndchr ; ouput it

  pop acc      ; get the last digit
  orl a, #30h  ; convert to ascii
  lcall sndchr ; output it
  ret
  
;;Gets the operator from the client
op:
    lcall getchr
    lcall sndchr
    mov P1, acc   ; put the acc on the port
    xch a, r5     ; swap the acc into r5
    lcall newline ; send newline
    xch a, r5     ; swap back
    ret
;; Send a new line (CAREFUL IT CLEARS ACC)
newline:
    ;; Send newlines
    mov a, #10 ; Newline
    lcall sndchr
    mov a, #13 ; Carriage Return
    lcall sndchr
    ret
num:
   lcall getchr  ; <- gets a char from pc keyboard
   lcall sndchr  ; -> and echoes on the screen
   anl a, #0Fh   ; Mask the upper nibble in accumulator to extract numeric
   mov P1, acc   ; Show the character on LED bank
   push acc      ; save the accumulator in stack
   sjmp clrf     ; check if enough digits

clrf:
    djnz r1, num    ; get another num if not enough digits
    lcall newline 
    ;; construct the number in a single byte
    pop 050h          ; pull off the smallest digit
    pop 051h          ; pull off the second smallest digit
    mov a, 051h       ; move the second into a 
    mov b, #10        ; move 10 into b
    mul ab            ; resize the second smallest digit
    add a, 050h       ; add the two together
    pop 050h          ; pull out another digit
    xch a, 050h       ; exchange the new digit and the result
    mov b, #100       ; move 100 into b
    mul ab            ; decimal placement on large digit
    add a, 050h       ; finish summing
    ;; return to caller
    mov r1, #3 ; Reset the number count
    ret
init:
    mov tmod, #20h        ; set timer 1 for auto reload - mode 2
    mov tcon, #40h        ; run timer 1
    mov th1,  #253        ; set 9600 baud with xtal=11.059mhz
    mov scon, #54h        ; set serial control reg for
    ret
getchr:
    jnb ri, getchr
    mov a, sbuf
    anl a, #7fh
    clr ri
    ret
sndchr:
    clr scon.1
    mov sbuf,a
txloop:
    jnb scon.1, txloop
    ret
;Leave this newline here

;If you want to be able to compile












###########################################################################################
;;; EX 6
;;; Bullet 1
;;; Read data from keypad
.org 0000h
lcall init
ljmp start

.org 100h
start:
  clr P3.2   ; enable the encoder chip
  setb p3.3  ; enable 3.3 as input
  mov p1, #0ffh   ; enable port 1 as input
  jnb P3.3, start  ; proceed if data avail
  mov a, P1        ; read p1
  lcall sndchr
  wait:    ; wait for the data to clear
    jb p3.3, wait
  sjmp start   ; repeat

sndchr:
    lcall bin ; convert a into ascii
    clr scon.1
    mov sbuf,a
init:
    mov tmod, #20h ; set timer 1 for auto reload - mode 2
    mov tcon, #40h ; run timer 1
    mov th1, #253 ; set 9600 baud with xtal=11.059mhz
    mov scon, #54h ; set serial control reg for
    ret

bin:
    anl a, #0Fh    ; Mask off the upper nibble
    inc a          ; increment so that we go past the ret opcode
    movc a, @a+pc  ; PC has the ret below, so we go a+pc -> a to pull from table
   ret
    .db '1','2','3','A','4','5','6','B'
    .db '7','8','9','C','*','0','#','D'





###########################################################################################
;;; EX 6
;;; Bullet 4
;;; Calculator which uses keypad
.org 00h ; power up and reset vector
    ljmp start ; when the micro wakes up, jump to the beginning of
               ; the main body or loop in the program called start
.org 100h ; and located at 100h in memory
start:
    lcall init ; start the serial port by calling subroutine init
    mov r1, #3 ; set the num digits
    mov acc, #13 ; set the first acc to be a newline
    loop: ; Now, endlessly repeat a loop that
        lcall newline ; put out a newline
        lcall num ; get first number
        push acc ; push result onto stack
        lcall num ; get second number
        pop 050h ; retrieve first number
        mov r7, a ; put the acc to a register
        lcall get_op ; get the operator

        xch a, r7 ; swap the operator and second number
        xch a, 050h ; swap the second and first number
        cjne r7, #2dh, addnum ; jump if symbol not minus sign
            subb a, 050h
            lcall result
            sjmp loop
        addnum:
            add a, 050h ; add first and second numbers
            lcall result
            sjmp loop
result:
  mov b, #10    ; Move down a decimal place
  div ab        ; perform the move
  push b        ; store remainder

  mov b, #10    ; move down a decimal place
  div ab        ; perform move
  push b        ; store remainder

  orl a, #30h   ; acc -> ascii
  lcall sndchr  ; Put out the highest digit

  pop acc       ; get the second highest digit
  orl a, #30h   ; acc -> ascii
  lcall sndchr  ; ouput it

  pop acc       ; get the last digit
  orl a, #30h   ; acc -> ascii
  lcall sndchr  ; output it

  ret

;;Gets the operator from the client
get_op:
    lcall getchr
    lcall sndchr

    xch a, r5
    lcall newline
    xch a, r5
    ret
;; Send a new line (CAREFUL IT CLEARS ACC)
newline:
    ;; Send newlines
    mov a, #10 ; Newline
    lcall sndchr
    mov a, #13 ; Carriage Return
    lcall sndchr
    ret
num:
   lcall getchr ; <- gets a char from keyboard
   lcall sndchr ; -> and echoes on the screen
   anl a, #0Fh  ; Mask the upper nibble in accumulator to extract numeric
   ;mov P1, acc ; Show the character on LED bank
   push acc     ; save the accumulator in stack
   sjmp clrf    ; check if enough digits

clrf:
    djnz r1, num    ; get another num if not enough digits
    lcall newline
                    ;; construct the number in a single byte
    pop 050h        ; pull off the smallest digit
    pop 051h        ; pull off the second smallest digit
    mov a, 051h     ; move the second into a
    mov b, #10      ; move 10 into b
    mul ab          ; resize the second smallest digit
    add a, 050h     ; add the two together
    pop 050h        ; pull out another digit
    xch a, 050h     ; exchange the new digit and the result
    mov b, #100     ; move 100 into b
    mul ab          ; decimal placement on large digit
    add a, 050h     ; finish summing
    mov r1, #3      ; Reset the number count
    ret
init:
                   ;; Keypad
    clr P3.2       ; enable the encoder
    setb p3.3      ; enable 3.3 as input
    mov p1, #0ffh  ; enable 1 as input
 
                   ; Serial
    mov tmod, #20h ; set timer 1 for auto reload - mode 2
    mov tcon, #40h ; run timer 1
    mov th1, #253  ; set 9600 baud with xtal=11.059mhz
    mov scon, #54h ; set serial control reg for
    ret
sndchr:
    clr scon.1
    mov sbuf,a
txloop:
    jnb scon.1, txloop
    ret
getchr:
    jnb ri, get_keypad_chr ; if no data on keyboard check pad
    mov a, sbuf            ; Otherwise, read char
    clr ri                 ; clear flag
    sjmp finish_chr
get_keypad_chr:
    jnb P3.3, getchr ; if data available on pad
    mov a, P1        ; read p1
    wait:            ; wait for the data to clear
    jb p3.3, wait    ; wait for key lift
    lcall bin        ; convert to ascii codes
finish_chr:
    anl a, #7fh    ; Mask values
    ret
bin:
    anl a, #0Fh   ; Mask off the upper nibble
    inc a         ; increment so that we go past the ret opcode
    movc a, @a+pc ; PC has the ret below, so we go a+pc -> a to pull from table
   ret
    ;KEY ORDER WILL BE:
    ;   '1','2','3','A','4','5','6','B','7','8','9','C','*','0','#','D'
    .db '1','2','3','A','4','5','6','B','7','8','9','C','+','0','-','D'

;Leave this newline here

;If you want to be able to compile

