



##################
##################
./1ex/minmon3.asm

##################
##################
; *************************************************
; * MINNMON - The Minimal 8051 Monitor Program *
; * *
; * Portions of this program are courtesy of *
; * Rigel Corporation, of Gainesville, Florida *
; * *
; * Modified for 6.115 *
; * Massachusetts Institute of Technology *
; * January, 2001 Steven B. Leeb *
; * *
; *************************************************
.equ stack, 2fh ; bottom of stack
                          ; - stack starts at 30h -
.equ errorf, 0 ; bit 0 is error status
;=================================================================
; 8032 hardware vectors
;=================================================================
   .org 00h ; power up and reset vector
   ljmp start
   .org 03h ; interrupt 0 vector
   ljmp start
   .org 0bh ; timer 0 interrupt vector
   ljmp start
   .org 13h ; interrupt 1 vector
   ljmp start
   .org 1bh ; timer 1 interrupt vector
   ljmp start
   .org 23h ; serial port interrupt vector
   ljmp start
   .org 2bh ; 8052 extra interrupt vector
   ljmp start
;=================================================================
; begin main program
;=================================================================
   .org 100h
start:
   clr ea ; disable interrupts
   lcall init
; initialize hardware
   lcall print ; print welcome message
   .db 0ah, 0dh, "Welcome to 6.115!", 0ah, 0dh,"MINMON> ", 0h
monloop:
   mov sp,#stack ; reinitialize stack pointer
   clr ea ; disable all interrupts
   clr errorf ; clear the error flag
   lcall print ; print prompt
   .db 0dh, 0ah,"*", 0h
   clr ri ; flush the serial input buffer
   lcall getcmd ; read the single-letter command
   mov r2, a ; put the command number in R2
   ljmp nway ; branch to a monitor routine
endloop: ; come here after command has finished
   sjmp monloop ; loop forever in monitor loop
;=================================================================
; subroutine init
; this routine initializes the hardware
; set up serial port with a 11.0592 MHz crystal,
; use timer 1 for 9600 baud serial communications
;=================================================================
init:
   mov tmod, #20h ; set timer 1 for auto reload - mode 2
   mov tcon, #41h ; run counter 1 and set edge trig ints
   mov th1, #0fdh ; set 9600 baud with xtal=11.059mhz
   mov scon, #50h ; set serial control reg for 8 bit data
                          ; and mode 1
   ret
;=================================================================
; monitor jump table
;=================================================================
jumtab:
   .dw badcmd ; command '@' 00
   .dw badcmd ; command 'a' 01
   .dw badcmd ; command 'b' 02
   .dw badcmd ; command 'c' 03
   .dw downld ; command 'd' 04 used
   .dw badcmd ; command 'e' 05
   .dw badcmd ; command 'f' 06
   .dw goaddr ; command 'g' 07 used
   .dw badcmd ; command 'h' 08
   .dw badcmd ; command 'i' 09
   .dw badcmd ; command 'j' 0a
   .dw badcmd ; command 'k' 0b
   .dw badcmd ; command 'l' 0c
   .dw badcmd ; command 'm' 0d
   .dw badcmd ; command 'n' 0e
   .dw badcmd ; command 'o' 0f
   .dw badcmd ; command 'p' 10
   .dw badcmd ; command 'q' 11
   .dw redcmd ; command 'r' 12 used
   .dw badcmd ; command 's' 13
   .dw twrcmd ; command 't' 14
   .dw badcmd ; command 'u' 15
   .dw badcmd ; command 'v' 16
   .dw wrtcmd ; command 'w' 17 used
   .dw badcmd ; command 'x' 18
   .dw badcmd ; command 'y' 19
   .dw badcmd ; command 'z' 1a

;*****************************************************************
; monitor command routines
;*****************************************************************
;===============================================================
; command goaddr 'g'
; this routine branches to the 4 hex digit address which follows
;===============================================================
goaddr:
   lcall getbyt ; get address high byte
   mov r7, a ; save in R7
   lcall prthex
   lcall getbyt ; get address low byte
   push acc ; push lsb of jump address
   lcall prthex
   lcall crlf
   mov a, r7 ; recall address high byte
   push acc ; push msb of jump address
   ret ; do jump by doing a ret
;===============================================================
; command wrtcmd 'w'
; this routine writes a byte to a 16 bit address
;===============================================================
wrtcmd:
   lcall getbyt ; get address high byte
   mov dph, a ; save in dph
   lcall prthex
   lcall getbyt ; get address low byte
   mov dpl, a ; save low byte in dpl
   lcall prthex

   lcall getchr
   lcall sndchr
   cjne a, #61, noteq ; If it is not an equal sign, restart

   lcall getbyt
   lcall prthex
   movx @dptr, a
   ljmp endloop ; do jump by doing a ret
   noteq:
   lcall print
   .db 0dh, 0ah,"Expected Equals", 0h
   ljmp endloop
;===============================================================
; command twrcmd 'w'
; this routine writes a 256 byte table starting at an 8 bit address in MSB
; goes until the user presses enter/enters 256 bytes
; ie,
; MINMON>
; *T94
; 9400 01
; 9401 02
; 9402 FF
;===============================================================
twrcmd:
   lcall getbyt ; get address high byte
   lcall prthex
   mov dph, a ; save in dph
   mov dpl, #00h ; start dpl at 0
   tblwr:

       mov a, #13 ; newline
       lcall sndchr
       mov a, #10 ; carriage return
       lcall sndchr

       mov a, dph
       lcall prthex ; print out the MSB

       mov a, dpl
       lcall prthex ; Print out the LSB

       mov a, #61
       lcall sndchr ; Print out equals

       lcall getbyt ; Get data to store
       lcall prthex

       movx @dptr, a ; Store data

       mov a, dpl
       add a, #01 ; increment dpl
	   mov dpl, a
       jnc tblwr ; if not overflowed
       clr c
   ljmp endloop



;===============================================================
; command redcmd 'r'
; this routine reads a byte from a 16 bit address
;===============================================================
redcmd:
   lcall getbyt ; get address high byte
   mov dph, a ; save in dph
   lcall prthex
   lcall getbyt ; get address low byte
   mov dpl, a ; save low byte in dpl
   lcall prthex
   lcall crlf

   movx a, @dptr ; Get the item in memory

   lcall prthex ; Print it out (in hex)
   ljmp endloop ; do jump by doing a ret
;===============================================================
; command downld 'd'
; this command reads in an Intel hex file from the serial port
; and stores it in external memory.
;===============================================================
downld:
   lcall crlf
   mov a, #'>' ; acknowledge by a '>'
   lcall sndchr
dl:
   lcall getchr ; read in ':'
   cjne a, #':', dl
   lcall getbytx ; get hex length byte
   jz enddl ; if length=0 then return
   mov r0, a ; save length in r0
   lcall getbytx ; get msb of address
   setb acc.7 ; make sure it is in RAM
   mov dph, a ; save in dph
   lcall getbytx ; get lsb of address
   mov dpl, a ; save in dpl
   lcall getbytx ; read in special purpose byte (ignore)
dloop:
   lcall getbytx ; read in data byte
   movx @dptr, a ; save in ext mem
   inc dptr ; bump mem pointer
   djnz r0, dloop ; repeat for all data bytes in record
   lcall getbytx ; read in checksum
   mov a, #'.'
   lcall sndchr ; handshake '.'
   sjmp dl ; read in next record
enddl:
   lcall getbytx ; read in remainder of the
   lcall getbytx ; termination record
   lcall getbytx
   lcall getbytx
   mov a, #'.'
   lcall sndchr ; handshake '.'
   ljmp endloop ; return
getbytx:
   lcall getbyt
   jb errorf, gb_err
   ret
gb_err:
   ljmp badpar

;*****************************************************************
; monitor support routines
;*****************************************************************
badcmd:
   lcall print
   .db 0dh, 0ah," bad command ", 0h
   ljmp endloop
badpar:
   lcall print
   .db 0dh, 0ah," bad parameter ", 0h
   ljmp endloop
;===============================================================
; subroutine getbyt
; this routine reads in an 2 digit ascii hex number from the
; serial port. the result is returned in the acc.
;===============================================================
getbyt:
   lcall getchr ; get msb ascii chr
   lcall ascbin ; conv it to binary
   swap a ; move to most sig half of acc
   mov b, a ; save in b
   lcall getchr ; get lsb ascii chr
   lcall ascbin ; conv it to binary
   orl a, b ; combine two halves
   ret
;===============================================================
; subroutine getcmd
; this routine gets the command line. currently only a
; single-letter command is read - all command line parameters
; must be parsed by the individual routines.
;
;===============================================================
getcmd:
   lcall getchr ; get the single-letter command
   clr acc.5 ; make upper case
   lcall sndchr ; echo command
   clr C ; clear the carry flag
   subb a, #'@' ; convert to command number
   jnc cmdok1 ; letter command must be above '@'
   lcall badpar
cmdok1:
   push acc ; save command number
   subb a, #1Bh ; command number must be 1Ah or less
   jc cmdok2
   lcall badpar ; no need to pop acc since badpar
                          ; initializes the system
cmdok2:
   pop acc ; recall command number
   ret
;===============================================================
; subroutine nway
; this routine branches (jumps) to the appropriate monitor
; routine. the routine number is in r2
;================================================================
nway:
   mov dptr, #jumtab ;point dptr at beginning of jump table
   mov a, r2 ;load acc with monitor routine number
   rl a ;multiply by two.
   inc a ;load first vector onto stack
   movc a, @a+dptr ; " "
   push acc ; " "
   mov a, r2 ;load acc with monitor routine number
   rl a ;multiply by two
   movc a, @a+dptr ;load second vector onto stack
   push acc ; " "
   ret ;jump to start of monitor routine


;*****************************************************************
; general purpose routines
;*****************************************************************
;===============================================================
; subroutine sndchr
; this routine takes the chr in the acc and sends it out the
; serial port.
;===============================================================
sndchr:
   clr scon.1 ; clear the tx buffer full flag.
   mov sbuf,a ; put chr in sbuf
txloop:
   jnb scon.1, txloop ; wait till chr is sent
   ret
;===============================================================
; subroutine getchr
; this routine reads in a chr from the serial port and saves it
; in the accumulator.
;===============================================================
getchr:
   jnb ri, getchr ; wait till character received
   mov a, sbuf ; get character
   anl a, #7fh ; mask off 8th bit
   clr ri ; clear serial status bit
   ret
;===============================================================
; subroutine print
; print takes the string immediately following the call and
; sends it out the serial port. the string must be terminated
; with a null. this routine will ret to the instruction
; immediately following the string.
;===============================================================
print:
   pop dph ; put return address in dptr
   pop dpl
prtstr:
   clr a ; set offset = 0
   movc a, @a+dptr ; get chr from code memory
   cjne a, #0h, mchrok ; if termination chr, then return
   sjmp prtdone
mchrok:
   lcall sndchr ; send character
   inc dptr ; point at next character
   sjmp prtstr ; loop till end of string
prtdone:
   mov a, #1h ; point to instruction after string
   jmp @a+dptr ; return
;===============================================================
; subroutine crlf
; crlf sends a carriage return line feed out the serial port
;===============================================================
crlf:
   mov a, #0ah ; print lf
   lcall sndchr
cret:
   mov a, #0dh ; print cr
   lcall sndchr
   ret
;===============================================================
; subroutine prthex
; this routine takes the contents of the acc and prints it out
; as a 2 digit ascii hex number.
;===============================================================
prthex:
   push acc
   lcall binasc ; convert acc to ascii
   lcall sndchr ; print first ascii hex digit
   mov a, r2 ; get second ascii hex digit
   lcall sndchr ; print it
   pop acc
   ret
;===============================================================
; subroutine binasc
; binasc takes the contents of the accumulator and converts it
; into two ascii hex numbers. the result is returned in the
; accumulator and r2.
;===============================================================
binasc:
   mov r2, a ; save in r2
   anl a, #0fh ; convert least sig digit.
   add a, #0f6h ; adjust it
   jnc noadj1 ; if a-f then readjust
   add a, #07h
noadj1:
   add a, #3ah ; make ascii
   xch a, r2 ; put result in reg 2
   swap a ; convert most sig digit
   anl a, #0fh ; look at least sig half of acc
   add a, #0f6h ; adjust it
   jnc noadj2 ; if a-f then re-adjust
   add a, #07h
noadj2:
   add a, #3ah ; make ascii
   ret

;===============================================================
; subroutine ascbin
; this routine takes the ascii character passed to it in the
; acc and converts it to a 4 bit binary number which is returned
; in the acc.
;===============================================================
ascbin:
   clr errorf
   add a, #0d0h ; if chr < 30 then error
   jnc notnum
   clr c ; check if chr is 0-9
   add a, #0f6h ; adjust it
   jc hextry ; jmp if chr not 0-9
   add a, #0ah ; if it is then adjust it
   ret
hextry:
   clr acc.5 ; convert to upper
   clr c ; check if chr is a-f
   add a, #0f9h ; adjust it
   jnc notnum ; if not a-f then error
   clr c ; see if char is 46 or less.
   add a, #0fah ; adjust acc
   jc notnum ; if carry then not hex
   anl a, #0fh ; clear unused bits
   ret
notnum:
   setb errorf ; if not a valid digit
   ljmp endloop


;===============================================================
; mon_return is not a subroutine.
; it simply jumps to address 0 which resets the system and
; invokes the monitor program.
; A jump or a call to mon_return has the same effect since
; the monitor initializes the stack.
;===============================================================
mon_return:
   ljmp 0
; end of MINMON

;^^^ Spacer




##################
##################
./2ex/dacvolts.dat

##################
##################
hex, voltage,
0x00, .02,
0x10, .18,
0x20, .3,
0x30, .5,
0x40, .67,
0x50, .84,
0x60, .99,
0x70, 1.15,
0x80, 1.3,
0x90, 1.45,
0xA0, 1.64,
0xB0, 1.8,
0xC0, 1.97,
0xD0, 2.13
0xE0, 2.28
0xF0, 2.45




##################
##################
./3ex/singen.asm

##################
##################
.equ device, 0fe08h

.equ amount, 11

.org 0000h
ljmp start
.org 00bh
TIMER_ISR:
	ljmp handle_tick
.org 100h
start:
lcall init
loop:
    sjmp loop
	
init:
	clr c
    ; Keypad
	mov IE, #82h ; Enable interrupts, enable timer 0 interrupt
	setb P3.2 ; disable the keypad chip
	mov tmod, #02h ; set timer 0 for auto reload - mode 2
	mov dptr, #1000h
	movx a, @dptr
	mov th0, a
    clr tcon ; run timer 0
	setb TR0 ; Turn timer on
    ret

handle_tick:
	mov dptr, #table
	add a, #amount
	push acc
    movc a, @a+dptr
	mov dptr, #device
	mov b, #10
	div ab
    movx @dptr, a
	pop acc
    reti
	
.org 1000h
table:
.db 07fh, 082h, 085h, 088h, 08bh, 08fh, 092h, 095h
.db 098h, 09bh, 09eh, 0a1h, 0a4h, 0a7h, 0aah, 0adh
.db 0b0h, 0b3h, 0b6h, 0b8h, 0bbh, 0beh, 0c1h, 0c3h
.db 0c6h, 0c8h, 0cbh, 0cdh, 0d0h, 0d2h, 0d5h, 0d7h
.db 0d9h, 0dbh, 0ddh, 0e0h, 0e2h, 0e4h, 0e5h, 0e7h
.db 0e9h, 0ebh, 0ech, 0eeh, 0efh, 0f1h, 0f2h, 0f4h
.db 0f5h, 0f6h, 0f7h, 0f8h, 0f9h, 0fah, 0fbh, 0fbh
.db 0fch, 0fdh, 0fdh, 0feh, 0feh, 0feh, 0feh, 0feh
.db 0ffh, 0feh, 0feh, 0feh, 0feh, 0feh, 0fdh, 0fdh
.db 0fch, 0fbh, 0fbh, 0fah, 0f9h, 0f8h, 0f7h, 0f6h
.db 0f5h, 0f4h, 0f2h, 0f1h, 0efh, 0eeh, 0ech, 0ebh
.db 0e9h, 0e7h, 0e5h, 0e4h, 0e2h, 0e0h, 0ddh, 0dbh
.db 0d9h, 0d7h, 0d5h, 0d2h, 0d0h, 0cdh, 0cbh, 0c8h
.db 0c6h, 0c3h, 0c1h, 0beh, 0bbh, 0b8h, 0b6h, 0b3h
.db 0b0h, 0adh, 0aah, 0a7h, 0a4h, 0a1h, 09eh, 09bh
.db 098h, 095h, 092h, 08fh, 08bh, 088h, 085h, 082h
.db 07fh, 07ch, 079h, 076h, 073h, 06fh, 06ch, 069h
.db 066h, 063h, 060h, 05dh, 05ah, 057h, 054h, 051h
.db 04eh, 04bh, 048h, 046h, 043h, 040h, 03dh, 03bh
.db 038h, 036h, 033h, 031h, 02eh, 02ch, 029h, 027h
.db 025h, 023h, 021h, 01eh, 01ch, 01ah, 019h, 017h
.db 015h, 013h, 012h, 010h, 0fh, 0dh, 0ch, 0ah
.db 09h, 08h, 07h, 06h, 05h, 04h, 03h, 03h
.db 02h, 01h, 01h, 00h, 00h, 00h, 00h, 00h
.db 00h, 00h, 00h, 00h, 00h, 00h, 01h, 01h
.db 02h, 03h, 03h, 04h, 05h, 06h, 07h, 08h
.db 09h, 0ah, 0ch, 0dh, 0fh, 010h, 012h, 013h
.db 015h, 017h, 019h, 01ah, 01ch, 01eh, 021h, 023h
.db 025h, 027h, 029h, 02ch, 02eh, 031h, 033h, 036h
.db 038h, 03bh, 03dh, 040h, 043h, 046h, 048h, 04bh
.db 04eh, 051h, 054h, 057h, 05ah, 05dh, 060h, 063h
.db 066h, 069h, 06ch, 06fh, 073h, 076h, 079h, 07ch





##################
##################
./3ex/sintbl.txt

##################
##################
.db 7fh,82h,85h,88h,8bh,8fh,92h,95h,98h,9bh,9eh,a1h,a4h,a7h,aah,adh,b0h,b3h,b6h,b8h,bbh,beh,c1h,c3h,c6h,c8h,cbh,cdh,d0h,d2h,d5h,d7h,d9h,dbh,ddh,e0h,e2h,e4h,e5h,e7h,e9h,ebh,ech,eeh,efh,f1h,f2h,f4h,f5h,f6h,f7h,f8h,f9h,fah,fbh,fbh,fch,fdh,fdh,feh,feh,feh,feh,feh,ffh,feh,feh,feh,feh,feh,fdh,fdh,fch,fbh,fbh,fah,f9h,f8h,f7h,f6h,f5h,f4h,f2h,f1h,efh,eeh,ech,ebh,e9h,e7h,e5h,e4h,e2h,e0h,ddh,dbh,d9h,d7h,d5h,d2h,d0h,cdh,cbh,c8h,c6h,c3h,c1h,beh,bbh,b8h,b6h,b3h,b0h,adh,aah,a7h,a4h,a1h,9eh,9bh,98h,95h,92h,8fh,8bh,88h,85h,82h,7fh,7ch,79h,76h,73h,6fh,6ch,69h,66h,63h,60h,5dh,5ah,57h,54h,51h,4eh,4bh,48h,46h,43h,40h,3dh,3bh,38h,36h,33h,31h,2eh,2ch,29h,27h,25h,23h,21h,1eh,1ch,1ah,19h,17h,15h,13h,12h,10h,fh,dh,ch,ah,9h,8h,7h,6h,5h,4h,3h,3h,2h,1h,1h,0h,0h,0h,0h,0h,0h,0h,0h,0h,0h,0h,1h,1h,2h,3h,3h,4h,5h,6h,7h,8h,9h,ah,ch,dh,fh,10h,12h,13h,15h,17h,19h,1ah,1ch,1eh,21h,23h,25h,27h,29h,2ch,2eh,31h,33h,36h,38h,3bh,3dh,40h,43h,46h,48h,4bh,4eh,51h,54h,57h,5ah,5dh,60h,63h,66h,69h,6ch,6fh,73h,76h,79h,7ch




##################
##################
./3ex/sintblgen.py

##################
##################
import numpy as np
from matplotlib import pyplot as plt
x = np.linspace(0, np.pi*2, 257)[:-1]
nums = ((np.sin(x)+1)*255.0/2.0).astype(int)
plt.plot(x,nums)
plt.show()
data = [ "h, ".join(map(lambda x: '0'+hex(x)[2:-1],seg))+"h\n" for seg in np.split(nums,32) ]
plt.plot(x, [int("0x"+num.strip()[1:-1],16) for num in (",".join(data)).split(",")])
plt.show()
print ".db "+".db ".join(data)




##################
##################
./4ex/amulet.asm

##################
##################
.org 00h
	ljmp start
	
.org 100h
start:
	lcall init
	loop:
		mov dptr, #0FE15h
		movx a, @dptr
		anl a, #01h
		jz loop
		
		mov dptr, #0fe10h
		movx a, @dptr
		mov P1, a
		
		sjmp loop
		
	init:
		mov dptr, #0fe13h
		mov a, #083h
		movx @dptr, a
		
		mov a, #20
		mov dptr, #0fe10h
		movx @dptr, a
		
		mov a, #00
		mov dptr, #0fe11h
		movx @dptr, a
		
		mov dptr, #0fe13h
		mov a, #07h
		movx @dptr, a
		
		mov a, #00h
		mov dptr, #0FE01h
		movx @dptr, a
		ret
		




##################
##################
./5ex/circle.asm

##################
##################
.equ deviceX, 0fe18h
.equ deviceY, 0fe1ch



.equ scale, 2

.equ timer, 04ch

.org 0000h
ljmp start
.org 00bh
TIMER_ISR:
ljmp nway
.org 100h
;===============================================================
; subroutine nway
; this routine branches (jumps) to the appropriate monitor
; routine. the routine number is in r2
;================================================================
nway:
   mov dptr, #jumtab ;point dptr at beginning of jump table
   mov a, r7 ;load acc with monitor routine number
   rl a ;multiply by two.
   inc a ;load first vector onto stack
   movc a, @a+dptr ; " "
   push acc ; " "
   mov a, r7 ;load acc with monitor routine number
   rl a ;multiply by two
   movc a, @a+dptr ;load second vector onto stack
   push acc ; " "
   ret ;jump to start of monitor routine

;=================================================================
; pattern jump table
;=================================================================
jumtab:
   .dw  circle ; command '@' 00
   .dw  circle ; command 'a' 01
   .dw  circle ; command 'b' 02
   .dw  circle ; command 'c' 03
   .dw  circle ; command 'd' 04 used
   .dw  circle ; command 'e' 05
   .dw  circle ; command 'f' 06
   .dw  circle ; command 'g' 07 used
   .dw  circle ; command 'h' 08
   .dw  circle ; command 'i' 09
   .dw  circle ; command 'j' 0a
   .dw  circle ; command 'k' 0b
   .dw  circle ; command 'l' 0c
   .dw  circle ; command 'm' 0d
   .dw  circle ; command 'n' 0e
   .dw  circle ; command 'o' 0f
   .dw  circle ; command 'p' 10
   .dw  circle ; command 'q' 11
   .dw  circle ; command 'r' 12 used
   .dw  circle ; command 's' 13
   .dw  circle ; command 't' 14
   .dw  circle ; command 'u' 15
   .dw  circle ; command 'v' 16
   .dw  circle ; command 'w' 17 used
   .dw  circle ; command 'x' 18
   .dw  circle ; command 'y' 19
   .dw  circle ; command 'z' 1a




start:
mov r7, 0
lcall init
loop:
     sjmp loop

init:
	clr c
	clr b
	mov IE, #82h ; Enable interrupts, enable timer 0 interrupt
	setb P3.2 ; disable the keypad chip
	mov tmod, #02h ; set timer 0 for auto reload - mode 2
	mov th0, #timer
	clr tcon ; run timer 0
	setb TR0 ; Turn timer on
	setb p3.4 ; FIRE THE LAZARS
ret
; Requires r0-5 be reserved
; X high byte r0 X low byte r1
; Y high byte r2 Y low byte r3
; P high byte r4 P low byte r5
circle:
	.equ yInt, 4
	.equ yFractional, 0
	.equ yPhaseShiftInt, 32
	.equ yPhaseShiftFractional, 0
	.equ xInt, 4
	.equ xIntOvrflw, 5
	.equ xFractional, 0
	mov r4, #64; mov r4, #64
	mov r5, #0
draw:
	
	; Output the current values
	push acc	; save A (for whatever user code running)

	mov a, r0	; recall the X a position
	mov dptr, #table	; put the table address in dptr
	movc a, @a+dptr	; get the ath value from table
	mov dptr, #deviceX
	mov b, #scale
	div ab
	movx @dptr, a

	mov a, r3
	add a, r5
	mov a, r2	; recall the Y a position
	addc a, r4	; Phase shift a by Integer amt

	mov dptr, #table	; put the table address in dptr
		 movc a, @a+dptr	; get the ath value from table
	mov dptr, #deviceY
		mov b, #scale
	div ab
	movx @dptr, a

	; Increment lower byte value
	X:
		clr c
		mov a, r1
		add a, #xFractional
		mov r1, a
		mov a, r0
		addc a, #xInt	; add aamount to a
		xEnd:
		mov r0, a
		clr c
	Y:
		mov a, r3
		add a, #yFractional
		mov r3, a
		mov a, r2
		addc a, #yInt	; add aamount to a
		yEnd:
		mov r2, a
		clr c
		pop acc			; Restore a for whatever user code was running
	reti

.org 1000h
table:
.db 07fh, 082h, 085h, 088h, 08bh, 08fh, 092h, 095h
.db 098h, 09bh, 09eh, 0a1h, 0a4h, 0a7h, 0aah, 0adh
.db 0b0h, 0b3h, 0b6h, 0b8h, 0bbh, 0beh, 0c1h, 0c3h
.db 0c6h, 0c8h, 0cbh, 0cdh, 0d0h, 0d2h, 0d5h, 0d7h
.db 0d9h, 0dbh, 0ddh, 0e0h, 0e2h, 0e4h, 0e5h, 0e7h
.db 0e9h, 0ebh, 0ech, 0eeh, 0efh, 0f1h, 0f2h, 0f4h
.db 0f5h, 0f6h, 0f7h, 0f8h, 0f9h, 0fah, 0fbh, 0fbh
.db 0fch, 0fdh, 0fdh, 0feh, 0feh, 0feh, 0feh, 0feh
.db 0ffh, 0feh, 0feh, 0feh, 0feh, 0feh, 0fdh, 0fdh
.db 0fch, 0fbh, 0fbh, 0fah, 0f9h, 0f8h, 0f7h, 0f6h
.db 0f5h, 0f4h, 0f2h, 0f1h, 0efh, 0eeh, 0ech, 0ebh
.db 0e9h, 0e7h, 0e5h, 0e4h, 0e2h, 0e0h, 0ddh, 0dbh
.db 0d9h, 0d7h, 0d5h, 0d2h, 0d0h, 0cdh, 0cbh, 0c8h
.db 0c6h, 0c3h, 0c1h, 0beh, 0bbh, 0b8h, 0b6h, 0b3h
.db 0b0h, 0adh, 0aah, 0a7h, 0a4h, 0a1h, 09eh, 09bh
.db 098h, 095h, 092h, 08fh, 08bh, 088h, 085h, 082h
.db 07fh, 07ch, 079h, 076h, 073h, 06fh, 06ch, 069h
.db 066h, 063h, 060h, 05dh, 05ah, 057h, 054h, 051h
.db 04eh, 04bh, 048h, 046h, 043h, 040h, 03dh, 03bh
.db 038h, 036h, 033h, 031h, 02eh, 02ch, 029h, 027h
.db 025h, 023h, 021h, 01eh, 01ch, 01ah, 019h, 017h
.db 015h, 013h, 012h, 010h, 0fh, 0dh, 0ch, 0ah
.db 09h, 08h, 07h, 06h, 05h, 04h, 03h, 03h
.db 02h, 01h, 01h, 00h, 00h, 00h, 00h, 00h
.db 00h, 00h, 00h, 00h, 00h, 00h, 01h, 01h
.db 02h, 03h, 03h, 04h, 05h, 06h, 07h, 08h
.db 09h, 0ah, 0ch, 0dh, 0fh, 010h, 012h, 013h
.db 015h, 017h, 019h, 01ah, 01ch, 01eh, 021h, 023h
.db 025h, 027h, 029h, 02ch, 02eh, 031h, 033h, 036h
.db 038h, 03bh, 03dh, 040h, 043h, 046h, 048h, 04bh
.db 04eh, 051h, 054h, 057h, 05ah, 05dh, 060h, 063h
.db 066h, 069h, 06ch, 06fh, 073h, 076h, 079h, 07ch





##################
##################
./5ex/final.asm

##################
##################
;depending on kit, change these
.equ deviceX, 0fe18h
.equ deviceY, 0fe1ch
; Divide all by two
.equ scale, 2
; timer 180 cycles
.equ timer, 04ch

.org 0000h
ljmp start

.org 00bh
TIMER_ISR:
ljmp draw

.org 30h
; Reserve some values in this space for laserdillo config
.equ yInt, 30h
.equ yFractional, 31h
.equ xInt, 32h
.equ xFractional, 33h
.equ phiInt, 34h
.equ phiFractional, 35h
.equ xPosH, 36h
.equ xPosL, 37h
.equ yPosH, 38h
.equ yPosL, 39h
.equ phiPosH, 3Ah
.equ phiPosL, 3Bh
.equ laserFractional, 3Ch
.equ laserPosL, 3Dh
.org 40h

.org 100h
start:
lcall init
lcall circle ; start on circle
loop:
	; Always reset the keypad in case it is being weird
    clr P3.2 ; enable the encoder chip
    setb p3.3 ; enable 3.3 as input
    mov p1, #0ffh ; enable port 1 as input
    nodata:
    jnb P3.3, nodata ; proceed if data avail

    mov a, P1 ; read p1
    lcall bin ; conver to a number 0-15
    ljmp nway; jump to the nway, then it will jump back
    wait: ; wait for the data to clear
        jb p3.3, wait
    sjmp loop ; repeat
bin:
    anl a, #0Fh ; Mask off the upper nibble
    inc a ; increment so that we go past the ret opcode
    movc a, @a+pc ; PC has the ret below, so we go a+pc -> a to pull from table
    ret
    .db 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15


   ; If we ever get amulet working, this unreachable code should do it!
   ; mov dptr, #0FE15h
   ; movx a, @dptr
   ; anl a, #01h
   ; jz loop

   ; mov dptr, #0fe10h
   ; movx a, @dptr
   ; mov p1, a
   ; sjmp loop


init:
    clr c
    clr b
    mov IE, #82h ; Enable interrupts, enable timer 0 interrupt
    mov tmod, #02h ; set timer 0 for auto reload - mode 2
    mov th0, #timer
    clr tcon ; run timer 0
    setb TR0 ; Turn timer on
    ret
; INCLUDE THIS FOR AMULET FUNCTION
;mov dptr, #0fe13h
;mov a, #083h
;movx @dptr, a

;mov a, #20
;mov dptr, #0fe10h
;movx @dptr, a

;mov a, #00
;mov dptr, #0fe11h
;movx @dptr, a

;mov dptr, #0fe13h
;mov a, #07h
;movx @dptr, a

;mov a, #00h
;mov dptr, #0FE01h
;movx @dptr, a



;===============================================================
; subroutine nway
; this routine branches (jumps) to the appropriate monitor
; routine. the routine number is in r2
;================================================================
nway:
   mov dptr, #jumtab ;point dptr at beginning of jump table
   rl a ;multiply by two.
   mov b, a
   inc a ;load first vector onto stack
   movc a, @a+dptr ; " "
   push acc ; " "
   mov a, b ;load acc with monitor routine number
   movc a, @a+dptr ;load second vector onto stack
   push acc ; " "
   ret ;jump to start of monitor routine

;=================================================================
; pattern jump table
;=================================================================
jumtab:
   .dw tie; command '@' 00
   .dw circle ; command 'a' 01
   .dw a1b4 ; command 'b' 02
   .dw incPhi ; command 'c' 03
   .dw incX ; command 'd' 04 used
   .dw incY ; command 'e' 05
   .dw circle ; command 'f' 06
   .dw decPhi ; command 'g' 07 used
   .dw decX ; command 'h' 08
   .dw decY ; command 'i' 09
   .dw circle ; command 'j' 0a
   .dw circle ; command 'k' 0b
   .dw laserdown ; command 'l' 0c
   .dw laserup ; command 'm' 0d
   .dw laserOff ; command 'n' 0e
   .dw laserReset ; command 'o' 0f
laserup:
    inc  laserFractional
    inc laserFractional
    inc  laserFractional
    ljmp wait
laserdown:
    dec  laserFractional
    dec laserFractional
    dec  laserFractional
    ljmp wait
laserOff:
	mov laserFractional, #0
    clr p3.4
	ljmp wait
laserReset:
	mov laserFractional, #0
    setb p3.4
	ljmp wait
incX:
    inc xFractional
    inc xFractional
    inc xFractional
    ljmp wait

incY:
    inc yFractional
    inc yFractional
    inc yFractional
    ljmp wait
decX:
    dec xFractional
    dec xFractional
    dec xFractional
    ljmp wait

decY:
    dec yFractional
    dec yFractional
    dec yFractional
    ljmp wait

incPhi:
    inc phiFractional
    inc phiFractional
    inc phiFractional
    ljmp wait
decPhi:
    dec PhiFractional
    dec PhiFractional
    dec PhiFractional
    ljmp wait
circle:
    mov yPosH, #0h
    mov yPosL, #0h
    mov xPosH, #0h
    mov xPosL, #0h
    mov yInt, #4
    mov yFractional, #0
    mov xInt, #4
    mov xFractional, #0
    mov phiInt, #0
    mov phiFractional, #00h
    mov phiPosH, #64
    mov phiPosL, #0
    ljmp wait
tie:
    mov yPosH, #0h
    mov yPosL, #0h
    mov xPosH, #0h
    mov xPosL, #0h
    mov yInt, #3
    mov yFractional, #00h
    mov xInt, #1
    mov xFractional,#0
    mov phiInt, #00h
    mov phiFractional, #00h
    mov phiPosH, #64
    mov phiPosL, #0
    ljmp wait
a1b4:
    mov yPosH, #0h
    mov yPosL, #0h
    mov xPosH, #0h
    mov xPosL, #0h
    mov yInt, #01
    mov yFractional, #0h
    mov xInt, #4
    mov xFractional, #0
    mov phiInt, #0
    mov phiFractional, #00h
    mov phiPosH, #0
    mov phiPosL, #0
    ljmp wait
draw:

    ; Output the current values
    push acc	; save A (for whatever user code running)
    push dpl
    push dph
    push b
	
	; handle the laser switching
	xch a, laserPosL
    add a, laserFractional
    xch a, laserPosL
	jnc nolaserflip
	clr c
	cpl p3.4
	nolaserflip:
	
	; Handle the Phi
    xch a, phiPosL
    add a, phiFractional
    xch a, phiPosL

    xch a, phiPosH
    addc a, phiInt
    xch a, phiPosH

	; Handle the X axis
    mov a, xPosH	; recall the X a position
    mov dptr, #table	; put the table address in dptr
    movc a, @a+dptr	; get the ath value from table
    mov dptr, #deviceX
    mov b, #scale
    div ab
    movx @dptr, a

	; Handle the y Axis
    mov a, yPosL
    subb a, phiPosL ; set the carry if overflows base bit

    mov a, yPosH	; recall the Y a position
    subb a, phiPosH	; Phase shift a by Integer amt + carry

    mov dptr, #table	; put the table address in dptr
    movc a, @a+dptr	; get the ath value from table
    mov dptr, #deviceY
    mov b, #scale
    div ab
    movx @dptr, a

    ; Increment the X and Y positions
    X:
        clr c
        xch a, xPosL
        add a, xFractional
        xch a, xPosL
        xch a, xPosH
        addc a, xInt
        xch a, xPosH
    Y:
        xch a, yPosL
        add a, yFractional
        xch a, yPosL

        xch a, yPosH
        addc a, yInt
        xch a, yPosH
    pop b
    pop dph
    pop dpl
    pop acc	; Restore a for whatever user code was running
    reti

.org 1000h
table:
.db 07fh, 082h, 085h, 088h, 08bh, 08fh, 092h, 095h
.db 098h, 09bh, 09eh, 0a1h, 0a4h, 0a7h, 0aah, 0adh
.db 0b0h, 0b3h, 0b6h, 0b8h, 0bbh, 0beh, 0c1h, 0c3h
.db 0c6h, 0c8h, 0cbh, 0cdh, 0d0h, 0d2h, 0d5h, 0d7h
.db 0d9h, 0dbh, 0ddh, 0e0h, 0e2h, 0e4h, 0e5h, 0e7h
.db 0e9h, 0ebh, 0ech, 0eeh, 0efh, 0f1h, 0f2h, 0f4h
.db 0f5h, 0f6h, 0f7h, 0f8h, 0f9h, 0fah, 0fbh, 0fbh
.db 0fch, 0fdh, 0fdh, 0feh, 0feh, 0feh, 0feh, 0feh
.db 0ffh, 0feh, 0feh, 0feh, 0feh, 0feh, 0fdh, 0fdh
.db 0fch, 0fbh, 0fbh, 0fah, 0f9h, 0f8h, 0f7h, 0f6h
.db 0f5h, 0f4h, 0f2h, 0f1h, 0efh, 0eeh, 0ech, 0ebh
.db 0e9h, 0e7h, 0e5h, 0e4h, 0e2h, 0e0h, 0ddh, 0dbh
.db 0d9h, 0d7h, 0d5h, 0d2h, 0d0h, 0cdh, 0cbh, 0c8h
.db 0c6h, 0c3h, 0c1h, 0beh, 0bbh, 0b8h, 0b6h, 0b3h
.db 0b0h, 0adh, 0aah, 0a7h, 0a4h, 0a1h, 09eh, 09bh
.db 098h, 095h, 092h, 08fh, 08bh, 088h, 085h, 082h
.db 07fh, 07ch, 079h, 076h, 073h, 06fh, 06ch, 069h
.db 066h, 063h, 060h, 05dh, 05ah, 057h, 054h, 051h
.db 04eh, 04bh, 048h, 046h, 043h, 040h, 03dh, 03bh
.db 038h, 036h, 033h, 031h, 02eh, 02ch, 029h, 027h
.db 025h, 023h, 021h, 01eh, 01ch, 01ah, 019h, 017h
.db 015h, 013h, 012h, 010h, 0fh, 0dh, 0ch, 0ah
.db 09h, 08h, 07h, 06h, 05h, 04h, 03h, 03h
.db 02h, 01h, 01h, 00h, 00h, 00h, 00h, 00h
.db 00h, 00h, 00h, 00h, 00h, 00h, 01h, 01h
.db 02h, 03h, 03h, 04h, 05h, 06h, 07h, 08h
.db 09h, 0ah, 0ch, 0dh, 0fh, 010h, 012h, 013h
.db 015h, 017h, 019h, 01ah, 01ch, 01eh, 021h, 023h
.db 025h, 027h, 029h, 02ch, 02eh, 031h, 033h, 036h
.db 038h, 03bh, 03dh, 040h, 043h, 046h, 048h, 04bh
.db 04eh, 051h, 054h, 057h, 05ah, 05dh, 060h, 063h
.db 066h, 069h, 06ch, 06fh, 073h, 076h, 079h, 07ch




   




##################
##################
./5ex/lisaj.asm

##################
##################
.equ deviceY, 0fe18h
.equ deviceX, 0fe1ch



.equ scale, 2

.equ timer, 04ch

.org 0000h
ljmp start

.org 00bh
TIMER_ISR:
ljmp draw

.org 30h
	.equ yInt, 30h
	.equ yFractional, 31h
	.equ xInt, 32h
	.equ xFractional, 33h
	.equ phiInt, 34h
	.equ phiFractional, 35h
	.equ xPosH, 36h
	.equ xPosL, 37h
	.equ yPosH, 38h
	.equ yPosL, 39h
	.equ phiPosH, 3Ah
	.equ phiPosL, 3Bh
.org 40h

.org 100h
;===============================================================
; subroutine nway
; this routine branches (jumps) to the appropriate monitor
; routine. the routine number is in r2
;================================================================
nway:
   mov dptr, #jumtab ;point dptr at beginning of jump table
   mov a, r7 ;load acc with monitor routine number
   rl a ;multiply by two.
   inc a ;load first vector onto stack
   movc a, @a+dptr ; " "
   push acc ; " "
   mov a, r7 ;load acc with monitor routine number
   rl a ;multiply by two
   movc a, @a+dptr ;load second vector onto stack
   push acc ; " "
   ret ;jump to start of monitor routine

;=================================================================
; pattern jump table
;=================================================================
jumtab:
   .dw  circle ; command '@' 00
   .dw  circle ; command 'a' 01
   .dw  circle ; command 'b' 02
   .dw  circle ; command 'c' 03
   .dw  circle ; command 'd' 04 used
   .dw  circle ; command 'e' 05
   .dw  circle ; command 'f' 06
   .dw  circle ; command 'g' 07 used
   .dw  circle ; command 'h' 08
   .dw  circle ; command 'i' 09
   .dw  circle ; command 'j' 0a
   .dw  circle ; command 'k' 0b
   .dw  circle ; command 'l' 0c
   .dw  circle ; command 'm' 0d
   .dw  circle ; command 'n' 0e
   .dw  circle ; command 'o' 0f
   .dw  circle ; command 'p' 10
   .dw  circle ; command 'q' 11
   .dw  circle ; command 'r' 12 used
   .dw  circle ; command 's' 13
   .dw  circle ; command 't' 14
   .dw  circle ; command 'u' 15
   .dw  circle ; command 'v' 16
   .dw  circle ; command 'w' 17 used
   .dw  circle ; command 'x' 18
   .dw  circle ; command 'y' 19
   .dw  circle ; command 'z' 1a




start:
mov r7, 0
lcall circle
lcall init
loop:
     sjmp loop

init:
	clr c
	clr b
	mov IE, #82h ; Enable interrupts, enable timer 0 interrupt
	setb P3.2 ; disable the keypad chip
	mov tmod, #02h ; set timer 0 for auto reload - mode 2
	mov th0, #timer
	clr tcon ; run timer 0
	setb TR0 ; Turn timer on
	setb p3.4 ; FIRE THE LAZARS
ret

circle:
	mov yInt, #4
	mov yFractional, #0
	mov xInt, #4
	mov xFractional, #0
	mov phiInt, #0
	mov phiFractional, #0fh
	mov phiPosH, #64
	mov phiPosL, #0
	ret

draw:
	
	; Output the current values
	push acc	; save A (for whatever user code running)
	
	xch a, phiPosL
	add a, phiFractional
	xch a, phiPosL
	
	xch a, phiPosH
	addc a, phiInt
	xch a, phiPosH
	

	mov a, xPosH	; recall the X a position
	mov dptr, #table	; put the table address in dptr
	movc a, @a+dptr	; get the ath value from table
	mov dptr, #deviceX
	mov b, #scale
	div ab
	movx @dptr, a

	mov a, yPosL
	add a, phiPosL ; set the carry if overflows base bit
	
	mov a, yPosH	; recall the Y a position
	addc a, phiPosH	; Phase shift a by Integer amt + carry

	mov dptr, #table	; put the table address in dptr
	movc a, @a+dptr	; get the ath value from table
	mov dptr, #deviceY
	mov b, #scale
	div ab
	movx @dptr, a

	; Increment lower byte value
	X:
		clr c
		xch a, xPosL
		add a, xFractional
		xch a, xPosL
		xch a, xPosH
		addc a, xInt	; add aamount to a
		xch a, xPosH
	Y:
		xch a, yPosL
		add a, yFractional
		xch a, yPosL
		
		xch a, yPosH
		addc a, yInt	; add aamount to a
		xch a, yPosH
		
		pop acc			; Restore a for whatever user code was running
	reti

.org 1000h
table:
.db 07fh, 082h, 085h, 088h, 08bh, 08fh, 092h, 095h
.db 098h, 09bh, 09eh, 0a1h, 0a4h, 0a7h, 0aah, 0adh
.db 0b0h, 0b3h, 0b6h, 0b8h, 0bbh, 0beh, 0c1h, 0c3h
.db 0c6h, 0c8h, 0cbh, 0cdh, 0d0h, 0d2h, 0d5h, 0d7h
.db 0d9h, 0dbh, 0ddh, 0e0h, 0e2h, 0e4h, 0e5h, 0e7h
.db 0e9h, 0ebh, 0ech, 0eeh, 0efh, 0f1h, 0f2h, 0f4h
.db 0f5h, 0f6h, 0f7h, 0f8h, 0f9h, 0fah, 0fbh, 0fbh
.db 0fch, 0fdh, 0fdh, 0feh, 0feh, 0feh, 0feh, 0feh
.db 0ffh, 0feh, 0feh, 0feh, 0feh, 0feh, 0fdh, 0fdh
.db 0fch, 0fbh, 0fbh, 0fah, 0f9h, 0f8h, 0f7h, 0f6h
.db 0f5h, 0f4h, 0f2h, 0f1h, 0efh, 0eeh, 0ech, 0ebh
.db 0e9h, 0e7h, 0e5h, 0e4h, 0e2h, 0e0h, 0ddh, 0dbh
.db 0d9h, 0d7h, 0d5h, 0d2h, 0d0h, 0cdh, 0cbh, 0c8h
.db 0c6h, 0c3h, 0c1h, 0beh, 0bbh, 0b8h, 0b6h, 0b3h
.db 0b0h, 0adh, 0aah, 0a7h, 0a4h, 0a1h, 09eh, 09bh
.db 098h, 095h, 092h, 08fh, 08bh, 088h, 085h, 082h
.db 07fh, 07ch, 079h, 076h, 073h, 06fh, 06ch, 069h
.db 066h, 063h, 060h, 05dh, 05ah, 057h, 054h, 051h
.db 04eh, 04bh, 048h, 046h, 043h, 040h, 03dh, 03bh
.db 038h, 036h, 033h, 031h, 02eh, 02ch, 029h, 027h
.db 025h, 023h, 021h, 01eh, 01ch, 01ah, 019h, 017h
.db 015h, 013h, 012h, 010h, 0fh, 0dh, 0ch, 0ah
.db 09h, 08h, 07h, 06h, 05h, 04h, 03h, 03h
.db 02h, 01h, 01h, 00h, 00h, 00h, 00h, 00h
.db 00h, 00h, 00h, 00h, 00h, 00h, 01h, 01h
.db 02h, 03h, 03h, 04h, 05h, 06h, 07h, 08h
.db 09h, 0ah, 0ch, 0dh, 0fh, 010h, 012h, 013h
.db 015h, 017h, 019h, 01ah, 01ch, 01eh, 021h, 023h
.db 025h, 027h, 029h, 02ch, 02eh, 031h, 033h, 036h
.db 038h, 03bh, 03dh, 040h, 043h, 046h, 048h, 04bh
.db 04eh, 051h, 054h, 057h, 05ah, 05dh, 060h, 063h
.db 066h, 069h, 06ch, 06fh, 073h, 076h, 079h, 07ch

